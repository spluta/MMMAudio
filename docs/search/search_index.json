{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MMMAudio Documentation","text":"<p>Welcome to the MMMAudio documentation! MMMAudio is a high-performance audio processing library that combines the ease of Python with the speed of Mojo for real-time audio applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>High Performance: Leverages Mojo's SIMD capabilities for optimal audio processing</li> <li>Dual Language Support: Write audio logic in Python, optimize critical paths in Mojo</li> <li>Real-time Capable: Designed for low-latency audio applications</li> <li>Modular Design: Composable DSP building blocks</li> <li>ML Integration: Support for neural network audio processing</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from mmm_src.MMMAudio import MMMAudio\nfrom mmm_dsp.Osc import SineOsc\n\n# Create audio engine\naudio = MMMAudio(sample_rate=44100, buffer_size=512)\n\n# Create and connect oscillator\nosc = SineOsc(frequency=440.0)\naudio.connect(osc, audio.output)\n\n# Start processing\naudio.start()\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Installation and basic usage</li> <li>API Reference: Complete API documentation</li> <li>Examples: Practical usage examples</li> <li>Development: Contributing and development guide</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>MMMAudio is built around a graph-based processing model where audio flows through connected nodes. Each node can be implemented in either Python (for flexibility) or Mojo (for performance).</p>"},{"location":"#core-components","title":"Core Components","text":"<ul> <li>DSP Modules (<code>mmm_dsp</code>): Basic audio processing building blocks</li> <li>Framework (<code>mmm_src</code>): Audio engine and graph management</li> <li>Utilities (<code>mmm_utils</code>): Mathematical and utility functions</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub: https://github.com/tedmoore/MMMAudio</li> <li>Issues: Report bugs and feature requests on GitHub</li> </ul>"},{"location":"getting-started/","title":"Getting Started with MMMAudio","text":"<p>MMMAudio is a high-performance audio processing library that combines Python's ease of use with Mojo's performance for real-time audio applications.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Mojo compiler (latest version)</li> <li>Audio drivers (ASIO on Windows, CoreAudio on macOS, ALSA on Linux)</li> </ul>"},{"location":"getting-started/#install-from-source","title":"Install from Source","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/tedmoore/MMMAudio.git\ncd MMMAudio\n</code></pre> <ol> <li>Install Python dependencies:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Verify Mojo installation:</li> </ol> <pre><code>mojo --version\n</code></pre>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":""},{"location":"getting-started/#basic-audio-setup","title":"Basic Audio Setup","text":"<p>Create a simple audio processing chain:</p> <pre><code>from mmm_src.MMMAudio import MMMAudio\nfrom mmm_dsp.Osc import SineOsc\n\n# Initialize audio engine\naudio = MMMAudio(\n    sample_rate=44100,\n    buffer_size=512,\n    channels=2\n)\n\n# Create a sine wave oscillator\nosc = SineOsc(frequency=440.0, amplitude=0.5)\n\n# Connect oscillator to audio output\naudio.connect(osc, audio.output)\n\n# Start audio processing\naudio.start()\n\n# Let it run for 5 seconds\nimport time\ntime.sleep(5)\n\n# Stop audio\naudio.stop()\n</code></pre>"},{"location":"getting-started/#using-mojo-for-performance","title":"Using Mojo for Performance","text":"<p>For performance-critical operations, use Mojo implementations:</p> <pre><code>from mmm_utils.functions import linlin\nfrom algorithm import parallelize\n\n# Process control data with SIMD optimization\nmidi_velocities = [64, 80, 96, 127]  # MIDI velocity values\ngains = []\n\nfor velocity in midi_velocities:\n    # Convert MIDI velocity to linear gain using Mojo function\n    gain = linlin(float(velocity), 0.0, 127.0, 0.0, 1.0)\n    gains.append(gain)\n\nprint(f\"Converted gains: {gains}\")\n</code></pre>"},{"location":"getting-started/#core-concepts","title":"Core Concepts","text":""},{"location":"getting-started/#audio-graph","title":"Audio Graph","text":"<p>MMMAudio uses a graph-based processing model where audio flows through connected nodes:</p> <pre><code># Create nodes\ninput_node = audio.input\nosc1 = SineOsc(440.0)\nosc2 = SineOsc(880.0)\nmixer = Mixer(2)  # 2-input mixer\noutput_node = audio.output\n\n# Connect the graph\naudio.connect(osc1, mixer.input[0])\naudio.connect(osc2, mixer.input[1])\naudio.connect(mixer, output_node)\n</code></pre>"},{"location":"getting-started/#simd-optimization","title":"SIMD Optimization","text":"<p>Mojo functions support SIMD operations for processing multiple values simultaneously:</p> <pre><code># Process 4 frequencies at once\nfrom mmm_utils.functions import midicps\n\nmidi_notes = SIMD[DType.float64, 4](60.0, 64.0, 67.0, 72.0)  # C major chord\nfrequencies = midicps[4](midi_notes)  # Convert to frequencies\n</code></pre>"},{"location":"getting-started/#real-time-processing","title":"Real-time Processing","text":"<p>MMMAudio is designed for real-time audio with low latency:</p> <pre><code># Configure for low latency\naudio = MMMAudio(\n    sample_rate=44100,\n    buffer_size=128,  # Small buffer for low latency\n    channels=2\n)\n\n# Use efficient processing chains\nreverb = Reverb(room_size=0.5, damping=0.7)\naudio.connect(audio.input, reverb)\naudio.connect(reverb, audio.output)\n</code></pre>"},{"location":"getting-started/#examples","title":"Examples","text":""},{"location":"getting-started/#simple-synthesizer","title":"Simple Synthesizer","text":"<pre><code>from mmm_src.MMMAudio import MMMAudio\nfrom mmm_dsp.Osc import SineOsc\nfrom mmm_dsp.Env import ADSR\nfrom mmm_dsp.Filters import LowPass\n\n# Create audio engine\naudio = MMMAudio()\n\n# Create synthesis components\nosc = SineOsc(frequency=440.0)\nenvelope = ADSR(attack=0.1, decay=0.2, sustain=0.7, release=0.5)\nfilter = LowPass(cutoff=2000.0, resonance=0.5)\n\n# Build signal chain\naudio.connect(osc, filter)\naudio.connect(envelope, filter.cutoff_mod)  # Envelope modulates filter\naudio.connect(filter, audio.output)\n\n# Start synthesis\naudio.start()\nenvelope.trigger()  # Trigger note\n\ntime.sleep(2)\nenvelope.release()  # Release note\ntime.sleep(1)\n\naudio.stop()\n</code></pre>"},{"location":"getting-started/#multi-channel-processing","title":"Multi-channel Processing","text":"<pre><code># Stereo processing with different effects per channel\naudio = MMMAudio(channels=2)\n\n# Create stereo sources\nosc_left = SineOsc(440.0)\nosc_right = SineOsc(442.0)  # Slightly detuned for stereo effect\n\n# Different processing per channel\ndelay_left = Delay(time=0.3, feedback=0.3)\ndelay_right = Delay(time=0.4, feedback=0.2)\n\n# Connect stereo processing\naudio.connect(osc_left, delay_left)\naudio.connect(osc_right, delay_right)\naudio.connect(delay_left, audio.output.left)\naudio.connect(delay_right, audio.output.right)\n\naudio.start()\n</code></pre>"},{"location":"getting-started/#performance-tips","title":"Performance Tips","text":""},{"location":"getting-started/#use-simd-when-possible","title":"Use SIMD When Possible","text":"<pre><code># Instead of processing one value at a time:\nfor i in range(len(values)):\n    result[i] = linlin(values[i], 0.0, 1.0, 20.0, 20000.0)\n\n# Process multiple values with SIMD:\nfrom mmm_utils.functions import linlin\n\n# Convert list to SIMD and process all at once\nvalues_simd = SIMD[DType.float64, 4].from_list(values[:4])\nresults_simd = linlin[4](values_simd, 0.0, 1.0, 20.0, 20000.0)\n</code></pre>"},{"location":"getting-started/#optimize-buffer-sizes","title":"Optimize Buffer Sizes","text":"<pre><code># Balance latency vs CPU usage\naudio = MMMAudio(\n    buffer_size=256,  # Good balance for most applications\n    sample_rate=44100\n)\n\n# For very low latency (may increase CPU usage):\naudio_low_latency = MMMAudio(buffer_size=64)\n\n# For maximum efficiency (higher latency):\naudio_efficient = MMMAudio(buffer_size=1024)\n</code></pre>"},{"location":"getting-started/#reuse-objects","title":"Reuse Objects","text":"<pre><code># Create objects once and reuse\nosc = SineOsc()\n\n# Change parameters instead of creating new objects\nosc.set_frequency(880.0)\nosc.set_amplitude(0.5)\n\n# This is more efficient than:\n# osc = SineOsc(frequency=880.0, amplitude=0.5)  # Creates new object\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#audio-dropouts","title":"Audio Dropouts","text":"<p>If you experience audio dropouts:</p> <ol> <li> <p>Increase buffer size:    <pre><code>audio = MMMAudio(buffer_size=512)  # or higher\n</code></pre></p> </li> <li> <p>Reduce processing complexity in real-time callbacks</p> </li> <li> <p>Use Mojo implementations for CPU-intensive operations</p> </li> </ol>"},{"location":"getting-started/#import-errors","title":"Import Errors","text":"<p>Make sure the project is in your Python path:</p> <pre><code>import sys\nsys.path.append('/path/to/MMMAudio')\n</code></pre> <p>Or install in development mode:</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"getting-started/#mojo-compilation-issues","title":"Mojo Compilation Issues","text":"<p>Ensure you have the latest Mojo compiler:</p> <pre><code>mojo --version\n</code></pre> <p>Update if necessary according to Mojo documentation.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference for detailed function documentation</li> <li>Check out Examples for more complex usage patterns</li> <li>Read the Development Guide to contribute</li> </ul>"},{"location":"getting-started/#community-and-support","title":"Community and Support","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>Discussions: Questions and community interaction</li> <li>Documentation: Complete API reference and guides</li> </ul> <p>Happy audio processing with MMMAudio!</p>"},{"location":"api/","title":"API Reference","text":"<p>This section contains the complete API reference for MMMAudio, organized by module.</p>"},{"location":"api/#core-dsp-mmm_dsp","title":"Core DSP (<code>mmm_dsp</code>)","text":"<p>The core DSP modules provide the fundamental building blocks for audio processing:</p> <ul> <li>Utilities: Mathematical utility functions</li> <li>Oscillators: Sine, square, sawtooth, and noise generators</li> <li>Filters: Low-pass, high-pass, band-pass filters</li> <li>Envelopes: ADSR and other envelope generators</li> <li>Delays: Delay lines and echo effects</li> <li>Buffers: Audio buffer management</li> <li>Effects: Distortion and saturation</li> </ul>"},{"location":"api/#framework-mmm_src","title":"Framework (<code>mmm_src</code>)","text":"<p>The framework modules handle audio engine management and processing:</p> <ul> <li>Audio Engine: Main audio processing engine</li> <li>Graph System: Audio graph management</li> <li>Traits: Core interfaces and traits</li> <li>Scheduler: Event scheduling and timing</li> </ul>"},{"location":"api/#utilities-mmm_utils","title":"Utilities (<code>mmm_utils</code>)","text":"<p>Utility modules provide mathematical functions and helpers:</p> <ul> <li>Functions: Mathematical utility functions</li> <li>FFT: Fast Fourier Transform utilities</li> <li>Windows: Window functions for DSP</li> </ul>"},{"location":"api/#documentation-conventions","title":"Documentation Conventions","text":""},{"location":"api/#function-signatures","title":"Function Signatures","text":"<p>Functions are documented with their complete signatures including type information:</p> <pre><code>fn linlin[N: Int = 1](\n    value: SIMD[DType.float64, N], \n    in_min: SIMD[DType.float64, N], \n    in_max: SIMD[DType.float64, N], \n    out_min: SIMD[DType.float64, N], \n    out_max: SIMD[DType.float64, N]\n) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/#simd-support","title":"SIMD Support","text":"<p>Most functions support SIMD operations for processing multiple values simultaneously. The <code>N</code> parameter controls the SIMD width.</p>"},{"location":"api/#examples","title":"Examples","text":"<p>Each function includes practical examples showing typical usage patterns.</p>"},{"location":"api/mmm_dsp/Buffer/","title":"Buffer","text":""},{"location":"api/mmm_dsp/Buffer/#buffer_1","title":"Buffer","text":"<p>Has 2 possible constructors:</p> <p>1) Buffer(lists: List[List[Float64]], buf_sample_rate: Float64 = 48000.0).    - lists: List of channels, each channel is a List of Float64 samples.    - buf_sample_rate: Sample rate of the buffer (default is 48000.0).</p> <p>2) Buffer(num_chans: Int64 = 2, samples: Int64 = 48000, buf_sample_rate: Float64 = 48000.0).    - num_chans: Number of channels (default is 2 for stereo).    - samples: Number of samples per channel (default is 48000 for 1 second at 48kHz).    - buf_sample_rate: Sample rate of the buffer (default is 48000.0).</p> <p>Parent Traits: <code>AnyType</code>, <code>Buffable</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Buffer/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Buffer/#fn-get_num_frames","title":"<code>fn</code> get_num_frames","text":"<p>Return the number of frames in the buffer.</p>"},{"location":"api/mmm_dsp/Buffer/#signature","title":"Signature","text":"<pre><code>get_num_frames(self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#returns","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-get_duration","title":"<code>fn</code> get_duration","text":"<p>Return the duration of the buffer in seconds.</p>"},{"location":"api/mmm_dsp/Buffer/#signature_1","title":"Signature","text":"<pre><code>get_duration(self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-get_buf_sample_rate","title":"<code>fn</code> get_buf_sample_rate","text":"<p>Return the sample rate of the buffer.</p>"},{"location":"api/mmm_dsp/Buffer/#signature_2","title":"Signature","text":"<pre><code>get_buf_sample_rate(self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-quadratic_interp_loc","title":"<code>fn</code> quadratic_interp_loc","text":""},{"location":"api/mmm_dsp/Buffer/#signature_3","title":"Signature","text":"<pre><code>quadratic_interp_loc(self, idx: Int64, idx1: Int64, idx2: Int64, frac: Float64, chan: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#arguments","title":"Arguments","text":"<ul> <li>idx: <code>Int64</code> </li> <li>idx1: <code>Int64</code> </li> <li>idx2: <code>Int64</code> </li> <li>frac: <code>Float64</code> </li> <li>chan: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/Buffer/#returns_3","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-linear_interp_loc","title":"<code>fn</code> linear_interp_loc","text":""},{"location":"api/mmm_dsp/Buffer/#signature_4","title":"Signature","text":"<pre><code>linear_interp_loc(self, idx: Int64, idx1: Int64, frac: Float64, chan: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#arguments_1","title":"Arguments","text":"<ul> <li>idx: <code>Int64</code> </li> <li>idx1: <code>Int64</code> </li> <li>frac: <code>Float64</code> </li> <li>chan: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/Buffer/#returns_4","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-read_sinc","title":"<code>fn</code> read_sinc","text":""},{"location":"api/mmm_dsp/Buffer/#signature_5","title":"Signature","text":"<pre><code>read_sinc(mut self, chan: Int64, phase: Float64, last_phase: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#arguments_2","title":"Arguments","text":"<ul> <li>chan: <code>Int64</code> </li> <li>phase: <code>Float64</code> </li> <li>last_phase: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Buffer/#returns_5","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-read","title":"<code>fn</code> read","text":"<p>A read operation on the buffer that reads a multichannel buffer and returns a SIMD vector of size N. It will start reading from the channel specified by start_chan and read N channels from there.read(start_chan, phase, interp=0)</p>"},{"location":"api/mmm_dsp/Buffer/#signature_6","title":"Signature","text":"<pre><code>read[N: Int = 1](mut self, start_chan: Int64, phase: Float64, interp: Int64 = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - The number of channels to read (default is 1). The SIMD vector returned will have this size as well.  </li> </ul>"},{"location":"api/mmm_dsp/Buffer/#arguments_3","title":"Arguments","text":"<ul> <li>start_chan: <code>Int64</code> - The starting channel index to read from (0-based).  </li> <li>phase: <code>Float64</code> - The phase position to read from, where 0.0 is the start of the buffer and 1.0 is the end.  </li> <li>interp: <code>Int64</code> = <code>0</code> - The interpolation method to use (0 = linear, 1 = quadratic).  </li> </ul>"},{"location":"api/mmm_dsp/Buffer/#returns_6","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Buffer/#fn-write","title":"<code>fn</code> write","text":""},{"location":"api/mmm_dsp/Buffer/#signature_7","title":"Signature","text":"<pre><code>write[N: Int = 1](mut self, value: SIMD[DType.float64, N], index: Int64, start_channel: Int64 = 0)\n</code></pre>"},{"location":"api/mmm_dsp/Buffer/#parameters_1","title":"Parameters","text":"<ul> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/Buffer/#arguments_4","title":"Arguments","text":"<ul> <li>value: <code>SIMD</code> </li> <li>index: <code>Int64</code> </li> <li>start_channel: <code>Int64</code> = <code>0</code> </li> </ul> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Delays/","title":"Delays","text":""},{"location":"api/mmm_dsp/Delays/#delay","title":"Delay","text":"<p>A delay line with Lagrange interpolation.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Delays/#parameters","title":"Parameters","text":"<ol> <li>N: <code>Int</code> - size of the SIMD vector - defaults to 1</li> </ol>"},{"location":"api/mmm_dsp/Delays/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Delays/#fn-next","title":"<code>fn</code> next","text":"<p>Process one sample through the delay line. This function computes the average of two values.next(input, delay_time)</p>"},{"location":"api/mmm_dsp/Delays/#signature","title":"Signature","text":"<pre><code>next(mut self, input: SIMD[DType.float64, N], delay_time: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Delays/#arguments","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> - The input sample to process.  </li> <li>delay_time: <code>SIMD</code> - The amount of delay to apply (in seconds).  </li> </ul>"},{"location":"api/mmm_dsp/Delays/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code> The processed output sample.</p>"},{"location":"api/mmm_dsp/Delays/#fn-lagrange4","title":"<code>fn</code> lagrange4","text":"<p>Perform Lagrange interpolation for 4th order case (from JOS Faust Model).</p>"},{"location":"api/mmm_dsp/Delays/#signature_1","title":"Signature","text":"<pre><code>lagrange4(mut self, input: SIMD[DType.float64, N], delay_time: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Delays/#arguments_1","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>delay_time: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Delays/#returns_1","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### Comb</p> <p>A simple comb filter using a delay line with feedback.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Delays/#parameters_1","title":"Parameters","text":"<ol> <li>N: <code>Int</code> - size of the SIMD vector - defaults to 1</li> </ol>"},{"location":"api/mmm_dsp/Delays/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Delays/#fn-next_1","title":"<code>fn</code> next","text":"<p>Process one sample through the comb filter.next(input, delay_time=0.0, feedback=0.0, interp=0)</p>"},{"location":"api/mmm_dsp/Delays/#signature_2","title":"Signature","text":"<pre><code>next(mut self, input: SIMD[DType.float64, N], delay_time: SIMD[DType.float64, N] = 0, feedback: SIMD[DType.float64, N] = 0, interp: Int64 = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Delays/#arguments_2","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> - The input sample to process.  </li> <li>delay_time: <code>SIMD</code> = <code>0</code> - The amount of delay to apply (in seconds).  </li> <li>feedback: <code>SIMD</code> = <code>0</code> - The amount of feedback to apply (0.0 to 1.0).  </li> <li>interp: <code>Int64</code> = <code>0</code> - The interpolation method to use (0 = linear, 1 = cubic, 2 = Lagrange).  </li> </ul>"},{"location":"api/mmm_dsp/Delays/#returns_2","title":"Returns","text":"<p>Type: <code>SIMD</code> The processed output sample.</p> <p>---### FBDelay</p> <p>Like a Comb filter but with any amount of feedback and a tanh function.</p> <pre><code>Parameters:\n  N: size of the SIMD vector - defaults to 1\n</code></pre> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Delays/#parameters_2","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Delays/#functions_2","title":"Functions","text":""},{"location":"api/mmm_dsp/Delays/#fn-next_2","title":"<code>fn</code> next","text":"<p>Process one sample or SIMD vector through the feedback delay.next(input, delay_time=0.0, feedback=0.0, interp=0)</p>"},{"location":"api/mmm_dsp/Delays/#signature_3","title":"Signature","text":"<pre><code>next(mut self, input: SIMD[DType.float64, N], delay_time: SIMD[DType.float64, N], feedback: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Delays/#arguments_3","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> - The input sample to process.  </li> <li>delay_time: <code>SIMD</code> - The amount of delay to apply (in seconds).  </li> <li>feedback: <code>SIMD</code> - The amount of feedback to apply (0.0 to 1.0).  </li> </ul>"},{"location":"api/mmm_dsp/Delays/#returns_3","title":"Returns","text":"<p>Type: <code>SIMD</code> The processed output sample or SIMD vector.</p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Distortion/","title":"Distortion","text":""},{"location":"api/mmm_dsp/Distortion/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Distortion/#vtanh","title":"vtanh","text":""},{"location":"api/mmm_dsp/Distortion/#signature","title":"Signature","text":"<pre><code>vtanh(in_samp: Float64, gain: Float64, offset: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Distortion/#arguments","title":"Arguments","text":"<ul> <li>in_samp: <code>Float64</code>- gain: <code>Float64</code>- offset: <code>Float64</code></li> </ul>"},{"location":"api/mmm_dsp/Distortion/#returns","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Distortion/#bitcrusher","title":"bitcrusher","text":""},{"location":"api/mmm_dsp/Distortion/#signature_1","title":"Signature","text":"<pre><code>bitcrusher(in_samp: Float64, bits: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Distortion/#arguments_1","title":"Arguments","text":"<ul> <li>in_samp: <code>Float64</code>- bits: <code>Int64</code></li> </ul>"},{"location":"api/mmm_dsp/Distortion/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/Distortion/#latch","title":"Latch","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Distortion/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Distortion/#fn-next","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Distortion/#signature_2","title":"Signature","text":"<pre><code>next(mut self, in_samp: Float64, trig: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Distortion/#arguments_2","title":"Arguments","text":"<ul> <li>in_samp: <code>Float64</code> </li> <li>trig: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Distortion/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Env/","title":"Env","text":""},{"location":"api/mmm_dsp/Env/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Env/#min_env","title":"min_env","text":"<p>Create a minimum envelope with specified ramp and duration.</p>"},{"location":"api/mmm_dsp/Env/#signature","title":"Signature","text":"<pre><code>min_env[N: Int = 1](ramp: SIMD[DType.float64, N] = 0.01, dur: SIMD[DType.float64, N] = 0.10000000000000001, rise: SIMD[DType.float64, N] = 0.001) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Env/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code></li> </ul>"},{"location":"api/mmm_dsp/Env/#arguments","title":"Arguments","text":"<ul> <li>ramp: <code>SIMD</code> = <code>0.01</code>- dur: <code>SIMD</code> = <code>0.10000000000000001</code>- rise: <code>SIMD</code> = <code>0.001</code></li> </ul>"},{"location":"api/mmm_dsp/Env/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Env/#env_1","title":"Env","text":"<p>Envelope generator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Env/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Env/#fn-reset_vals","title":"<code>fn</code> reset_vals","text":"<p>Reset internal values.</p>"},{"location":"api/mmm_dsp/Env/#signature_1","title":"Signature","text":"<pre><code>reset_vals(mut self, times: List[Float64])\n</code></pre>"},{"location":"api/mmm_dsp/Env/#arguments_1","title":"Arguments","text":"<ul> <li>times: <code>List</code> </li> </ul>"},{"location":"api/mmm_dsp/Env/#fn-next","title":"<code>fn</code> next","text":"<p>Generate the next envelope sample.</p>"},{"location":"api/mmm_dsp/Env/#signature_2","title":"Signature","text":"<pre><code>next(mut self, values: List[Float64] = List[Float64, False](0, 1, 0, Tuple[]()), times: List[Float64] = List[Float64, False](1, 1, Tuple[]()), curves: List[Float64] = List[Float64, False](1, Tuple[]()), loop: Int64 = 0, trig: Float64 = 1, time_warp: Float64 = 1) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Env/#arguments_2","title":"Arguments","text":"<ul> <li>values: <code>List</code> = <code>List[Float64, False](0, 1, 0, Tuple[]())</code> </li> <li>times: <code>List</code> = <code>List[Float64, False](1, 1, Tuple[]())</code> </li> <li>curves: <code>List</code> = <code>List[Float64, False](1, Tuple[]())</code> </li> <li>loop: <code>Int64</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>1</code> </li> <li>time_warp: <code>Float64</code> = <code>1</code> </li> </ul>"},{"location":"api/mmm_dsp/Env/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Filters/","title":"Filters","text":""},{"location":"api/mmm_dsp/Filters/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#tf2s","title":"tf2s","text":""},{"location":"api/mmm_dsp/Filters/#signature","title":"Signature","text":"<pre><code>tf2s[N: Int = 1](coeffs: List[SIMD[DType.float64, N]], mut coeffs_out: List[SIMD[DType.float64, N]], sample_rate: Float64)\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code></li> </ul>"},{"location":"api/mmm_dsp/Filters/#arguments","title":"Arguments","text":"<ul> <li>coeffs: <code>List</code>- coeffs_out: <code>List</code>- sample_rate: <code>Float64</code></li> </ul>"},{"location":"api/mmm_dsp/Filters/#lag","title":"Lag","text":"<p>A lag processor that smooths input values over time based on a specified lag time in seconds.</p> <p>Arguments:</p> <pre><code>**N:** Number of channels Lag will process. (This creates SIMD parallel processing.)\n</code></pre> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_1","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-get_small_simd","title":"<code>fn</code> get_small_simd","text":""},{"location":"api/mmm_dsp/Filters/#signature_1","title":"Signature","text":"<pre><code>get_small_simd(mut self, in_samp: SIMD[DType.float64, N], j: Int)\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_1","title":"Arguments","text":"<ul> <li>in_samp: <code>SIMD</code> </li> <li>j: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#fn-put_small_simd","title":"<code>fn</code> put_small_simd","text":""},{"location":"api/mmm_dsp/Filters/#signature_2","title":"Signature","text":"<pre><code>put_small_simd(mut self, j: Int)\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_2","title":"Arguments","text":"<ul> <li>j: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#fn-next","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Filters/#signature_3","title":"Signature","text":"<pre><code>next(mut self: Lag[N], var in_samp: SIMD[DType.float64, N], lag: SIMD[DType.float64, N] = 0.050000000000000003, num_lags: Int = $0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_3","title":"Arguments","text":"<ul> <li>in_samp: <code>SIMD</code> </li> <li>lag: <code>SIMD</code> = <code>0.050000000000000003</code> </li> <li>num_lags: <code>Int</code> = <code>$0</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### SVF</p> <p>State Variable Filter implementation translated from Oleg Nesterov's Faust implementation</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_2","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_2","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-reset","title":"<code>fn</code> reset","text":"<p>Reset internal state</p>"},{"location":"api/mmm_dsp/Filters/#signature_4","title":"Signature","text":"<pre><code>reset(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#fn-next_1","title":"<code>fn</code> next","text":"<p>next a single sample through the SVF</p>"},{"location":"api/mmm_dsp/Filters/#signature_5","title":"Signature","text":"<pre><code>next(mut self, input: SIMD[DType.float64, N], filter_type: SIMD[DType.int32, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain_db: SIMD[DType.float64, N] = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_4","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>filter_type: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain_db: <code>SIMD</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_1","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-lpf","title":"<code>fn</code> lpf","text":"<p>Lowpass filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_6","title":"Signature","text":"<pre><code>lpf(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_5","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_2","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-bpf","title":"<code>fn</code> bpf","text":"<p>Bandpass filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_7","title":"Signature","text":"<pre><code>bpf(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_6","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_3","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-hpf","title":"<code>fn</code> hpf","text":"<p>Highpass filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_8","title":"Signature","text":"<pre><code>hpf(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_7","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_4","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-notch","title":"<code>fn</code> notch","text":"<p>Notch filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_9","title":"Signature","text":"<pre><code>notch(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_8","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_5","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-peak","title":"<code>fn</code> peak","text":"<p>Peak filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_10","title":"Signature","text":"<pre><code>peak(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_9","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_6","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-allpass","title":"<code>fn</code> allpass","text":"<p>Allpass filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_11","title":"Signature","text":"<pre><code>allpass(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_10","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_7","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-bell","title":"<code>fn</code> bell","text":"<p>Bell filter (parametric EQ)</p>"},{"location":"api/mmm_dsp/Filters/#signature_12","title":"Signature","text":"<pre><code>bell(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain_db: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_11","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain_db: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_8","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-lowshelf","title":"<code>fn</code> lowshelf","text":"<p>Low shelf filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_13","title":"Signature","text":"<pre><code>lowshelf(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain_db: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_12","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain_db: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_9","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-highshelf","title":"<code>fn</code> highshelf","text":"<p>High shelf filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_14","title":"Signature","text":"<pre><code>highshelf(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain_db: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_13","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain_db: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_10","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### lpf_LR4</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_3","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_3","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-set_sample_rate","title":"<code>fn</code> set_sample_rate","text":""},{"location":"api/mmm_dsp/Filters/#signature_15","title":"Signature","text":"<pre><code>set_sample_rate(mut self, sample_rate: Float64)\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_14","title":"Arguments","text":"<ul> <li>sample_rate: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#fn-next_2","title":"<code>fn</code> next","text":"<p>a single sample through the 4th order lowpass filter.</p>"},{"location":"api/mmm_dsp/Filters/#signature_16","title":"Signature","text":"<pre><code>next(mut self, input: SIMD[DType.float64, N], frequency: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_15","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>frequency: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_11","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### OnePole</p> <p>Simple one-pole IIR filter that can be configured as lowpass or highpass</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#functions_4","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_3","title":"<code>fn</code> next","text":"<p>Process one sample through the filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_17","title":"Signature","text":"<pre><code>next(mut self, input: Float64, coef: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_16","title":"Arguments","text":"<ul> <li>input: <code>Float64</code> </li> <li>coef: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_12","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>---### Integrator</p> <p>Simple one-pole IIR filter that can be configured as lowpass or highpass</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#functions_5","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_4","title":"<code>fn</code> next","text":"<p>Process one sample through the filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_18","title":"Signature","text":"<pre><code>next(mut self, input: Float64, coef: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_17","title":"Arguments","text":"<ul> <li>input: <code>Float64</code> </li> <li>coef: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_13","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>---### DCTrap</p> <p>DC Trap from Digital Sound Generation by Beat Frei.</p> <p>Arguments:     input: The input signal to process.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_4","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_6","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_5","title":"<code>fn</code> next","text":"<p>Process one sample through the DC blocker filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_19","title":"Signature","text":"<pre><code>next(mut self, in_: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_18","title":"Arguments","text":"<ul> <li>in_: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_14","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### VAOnePole</p> <p>Simple one-pole IIR filter that can be configured as lowpass or highpass}</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_5","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_7","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-lpf_1","title":"<code>fn</code> lpf","text":"<p>Process one sample through the filter</p>"},{"location":"api/mmm_dsp/Filters/#signature_20","title":"Signature","text":"<pre><code>lpf(mut self, input: SIMD[DType.float64, N], freq: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_19","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>freq: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_15","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-hpf_1","title":"<code>fn</code> hpf","text":""},{"location":"api/mmm_dsp/Filters/#signature_21","title":"Signature","text":"<pre><code>hpf(mut self, input: SIMD[DType.float64, N], freq: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_20","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>freq: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_16","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### VAMoogLadder</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_6","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_8","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_6","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Filters/#signature_22","title":"Signature","text":"<pre><code>next(mut self, sig: SIMD[DType.float64, N], freq: SIMD[DType.float64, N], q_val: SIMD[DType.float64, N], os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_21","title":"Arguments","text":"<ul> <li>sig: <code>SIMD</code> </li> <li>freq: <code>SIMD</code> </li> <li>q_val: <code>SIMD</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_17","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### FIR</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_7","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_9","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_7","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Filters/#signature_23","title":"Signature","text":"<pre><code>next(mut self: FIR[N], input: SIMD[DType.float64, N], coeffs: List[SIMD[DType.float64, N]]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_22","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>coeffs: <code>List</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_18","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### IIR</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_8","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_10","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_8","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Filters/#signature_24","title":"Signature","text":"<pre><code>next(mut self: IIR[N], input: SIMD[DType.float64, N], coeffsbv: List[SIMD[DType.float64, N]], coeffsav: List[SIMD[DType.float64, N]]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_23","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>coeffsbv: <code>List</code> </li> <li>coeffsav: <code>List</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_19","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### tf2</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_9","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_11","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-next_9","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Filters/#signature_25","title":"Signature","text":"<pre><code>next(mut self: tf2[N], input: SIMD[DType.float64, N], coeffs: List[SIMD[DType.float64, N]]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_24","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>coeffs: <code>List</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_20","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### Reson</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Filters/#parameters_10","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Filters/#functions_12","title":"Functions","text":""},{"location":"api/mmm_dsp/Filters/#fn-lpf_2","title":"<code>fn</code> lpf","text":""},{"location":"api/mmm_dsp/Filters/#signature_26","title":"Signature","text":"<pre><code>lpf(mut self: Reson[N], input: SIMD[DType.float64, N], freq: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_25","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>freq: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_21","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-hpf_2","title":"<code>fn</code> hpf","text":""},{"location":"api/mmm_dsp/Filters/#signature_27","title":"Signature","text":"<pre><code>hpf(mut self: Reson[N], input: SIMD[DType.float64, N], freq: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_26","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>freq: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_22","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Filters/#fn-bpf_1","title":"<code>fn</code> bpf","text":""},{"location":"api/mmm_dsp/Filters/#signature_28","title":"Signature","text":"<pre><code>bpf(mut self: Reson[N], input: SIMD[DType.float64, N], freq: SIMD[DType.float64, N], q: SIMD[DType.float64, N], gain: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Filters/#arguments_27","title":"Arguments","text":"<ul> <li>input: <code>SIMD</code> </li> <li>freq: <code>SIMD</code> </li> <li>q: <code>SIMD</code> </li> <li>gain: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Filters/#returns_23","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/InterleavedBuffer/","title":"InterleavedBuffer","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#interleavedbuffer_1","title":"InterleavedBuffer","text":"<p>An audio buffer that loads data from a WAV file using SciPy and NumPy. The data is stored in an interleaved format.</p> <p>Parent Traits: <code>AnyType</code>, <code>Buffable</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-get_num_frames","title":"<code>fn</code> get_num_frames","text":"<p>Return the number of frames in the buffer.</p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#signature","title":"Signature","text":"<pre><code>get_num_frames(self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-get_duration","title":"<code>fn</code> get_duration","text":"<p>Return the duration of the buffer in seconds.</p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_1","title":"Signature","text":"<pre><code>get_duration(self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-get_buf_sample_rate","title":"<code>fn</code> get_buf_sample_rate","text":"<p>Return the sample rate of the buffer.</p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_2","title":"Signature","text":"<pre><code>get_buf_sample_rate(self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-load_file","title":"<code>fn</code> load_file","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_3","title":"Signature","text":"<pre><code>load_file(mut self, filename: String) -&gt; PythonObject\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#arguments","title":"Arguments","text":"<ul> <li>filename: <code>String</code> </li> </ul>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_3","title":"Returns","text":"<p>Type: <code>PythonObject</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#raises","title":"Raises","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-quadratic_interp_loc","title":"<code>fn</code> quadratic_interp_loc","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_4","title":"Signature","text":"<pre><code>quadratic_interp_loc(self, idx: Int64, idx1: Int64, idx2: Int64, frac: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#arguments_1","title":"Arguments","text":"<ul> <li>idx: <code>Int64</code> </li> <li>idx1: <code>Int64</code> </li> <li>idx2: <code>Int64</code> </li> <li>frac: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_4","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-linear_interp_loc","title":"<code>fn</code> linear_interp_loc","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_5","title":"Signature","text":"<pre><code>linear_interp_loc(self, idx: Int64, idx1: Int64, frac: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#arguments_2","title":"Arguments","text":"<ul> <li>idx: <code>Int64</code> </li> <li>idx1: <code>Int64</code> </li> <li>frac: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_5","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-next_sinc","title":"<code>fn</code> next_sinc","text":""},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_6","title":"Signature","text":"<pre><code>next_sinc(mut self, chan: Int64, phase: Float64, last_phase: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#arguments_3","title":"Arguments","text":"<ul> <li>chan: <code>Int64</code> </li> <li>phase: <code>Float64</code> </li> <li>last_phase: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_6","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#fn-read","title":"<code>fn</code> read","text":"<p>A read operation on the buffer that reads a multichannel buffer and returns a SIMD vector of size N.read(start_chan, phase, interp=0)</p>"},{"location":"api/mmm_dsp/InterleavedBuffer/#signature_7","title":"Signature","text":"<pre><code>read[N: Int = 1](mut self, start_chan: Int64, phase: Float64, interp: Int64 = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/InterleavedBuffer/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - The number of channels to read (default is 1). The SIMD vector returned will have this size as well.  </li> </ul>"},{"location":"api/mmm_dsp/InterleavedBuffer/#arguments_4","title":"Arguments","text":"<ul> <li>start_chan: <code>Int64</code> - The starting channel index to read from (0-based).  </li> <li>phase: <code>Float64</code> - The phase position to read from, where 0.0 is the start of the buffer and 1.0 is the end.  </li> <li>interp: <code>Int64</code> = <code>0</code> - The interpolation method to use (0 = linear, 1 = quadratic).  </li> </ul>"},{"location":"api/mmm_dsp/InterleavedBuffer/#returns_7","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/MLP/","title":"MLP","text":""},{"location":"api/mmm_dsp/MLP/#mlp_1","title":"MLP","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/MLP/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/MLP/#fn-next","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/MLP/#signature","title":"Signature","text":"<pre><code>next[N: Int = 16](mut self, input: List[Float64]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/MLP/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/MLP/#arguments","title":"Arguments","text":"<ul> <li>input: <code>List</code> </li> </ul>"},{"location":"api/mmm_dsp/MLP/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/MLP/#raises","title":"Raises","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Noise/","title":"Noise","text":""},{"location":"api/mmm_dsp/Noise/#whitenoise","title":"WhiteNoise","text":"<p>Generate white noise samples.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Noise/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Noise/#fn-next","title":"<code>fn</code> next","text":"<p>Generate the next white noise sample.</p>"},{"location":"api/mmm_dsp/Noise/#signature","title":"Signature","text":"<pre><code>next(self, gain: Float64 = 1) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Noise/#arguments","title":"Arguments","text":"<ul> <li>gain: <code>Float64</code> = <code>1</code> </li> </ul>"},{"location":"api/mmm_dsp/Noise/#returns","title":"Returns","text":"<p>Type: <code>Float64</code> A random value between -gain and gain.</p> <p>---### PinkNoise</p> <p>Generate pink noise samples.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Noise/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Noise/#fn-next_1","title":"<code>fn</code> next","text":"<p>Generate the next pink noise sample.</p>"},{"location":"api/mmm_dsp/Noise/#signature_1","title":"Signature","text":"<pre><code>next(mut self, gain: Float64 = 1) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Noise/#arguments_1","title":"Arguments","text":"<ul> <li>gain: <code>Float64</code> = <code>1</code> - Amplitude scaling factor.  </li> </ul>"},{"location":"api/mmm_dsp/Noise/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>---### BrownNoise</p> <p>Generate brown noise samples.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Noise/#functions_2","title":"Functions","text":""},{"location":"api/mmm_dsp/Noise/#fn-next_2","title":"<code>fn</code> next","text":"<p>Generate the next brown noise sample.</p>"},{"location":"api/mmm_dsp/Noise/#signature_2","title":"Signature","text":"<pre><code>next(mut self, gain: Float64 = 1) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Noise/#arguments_2","title":"Arguments","text":"<ul> <li>gain: <code>Float64</code> = <code>1</code> - Amplitude scaling factor.  </li> </ul>"},{"location":"api/mmm_dsp/Noise/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code> A brown noise sample scaled by gain.</p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Osc/","title":"Osc","text":""},{"location":"api/mmm_dsp/Osc/#phasor","title":"Phasor","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-increment_phase","title":"<code>fn</code> increment_phase","text":""},{"location":"api/mmm_dsp/Osc/#signature","title":"Signature","text":"<pre><code>increment_phase(mut self: Phasor[N], freq: SIMD[DType.float64, N], os_index: Int = 0)\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#fn-next","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_1","title":"Signature","text":"<pre><code>next(mut self: Phasor[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_1","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### Osc</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_1","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_1","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_2","title":"Signature","text":"<pre><code>next(mut self: Osc[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, osc_type: SIMD[DType.int64, N] = 0, interp: SIMD[DType.int64, N] = 1, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_2","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>osc_type: <code>SIMD</code> = <code>0</code> </li> <li>interp: <code>SIMD</code> = <code>1</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_1","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Osc/#fn-next_interp","title":"<code>fn</code> next_interp","text":""},{"location":"api/mmm_dsp/Osc/#signature_3","title":"Signature","text":"<pre><code>next_interp(mut self: Osc[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, osc_types: List[Int64] = List[Int64, False](0, 4, 5, 6, Tuple[]()), osc_frac: SIMD[DType.float64, N] = 0, interp: Int64 = 1, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_3","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>osc_types: <code>List</code> = <code>List[Int64, False](0, 4, 5, 6, Tuple[]())</code> </li> <li>osc_frac: <code>SIMD</code> = <code>0</code> </li> <li>interp: <code>Int64</code> = <code>1</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_2","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### SinOsc</p> <p>A sine wave oscillator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_2","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_2","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_2","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_4","title":"Signature","text":"<pre><code>next(mut self: SinOsc[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, interp: Int64 = 0, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_4","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>interp: <code>Int64</code> = <code>0</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_3","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### LFSaw</p> <p>A low-frequency sawtooth oscillator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_3","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_3","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_3","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_5","title":"Signature","text":"<pre><code>next(mut self: LFSaw[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, interp: Int64 = 0, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_5","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>interp: <code>Int64</code> = <code>0</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_4","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### LFSquare</p> <p>A low-frequency square wave oscillator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_4","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_4","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_4","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_6","title":"Signature","text":"<pre><code>next(mut self: LFSquare[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, interp: Int64 = 0, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_6","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>interp: <code>Int64</code> = <code>0</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_5","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### LFTri</p> <p>A low-frequency triangle wave oscillator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_5","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_5","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_5","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_7","title":"Signature","text":"<pre><code>next(mut self: LFTri[N], freq: SIMD[DType.float64, N] = 100, phase_offset: SIMD[DType.float64, N] = 0, trig: Float64 = 0, interp: Int64 = 0, os_index: Int = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_7","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>phase_offset: <code>SIMD</code> = <code>0</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>interp: <code>Int64</code> = <code>0</code> </li> <li>os_index: <code>Int</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_6","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### Impulse</p> <p>An oscillator that generates an impulse signal. Arguments:     world_ptr: Pointer to the MMMWorld instance.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_6","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_6","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_6","title":"<code>fn</code> next","text":"<p>Generate the next impulse sample.</p>"},{"location":"api/mmm_dsp/Osc/#signature_8","title":"Signature","text":"<pre><code>next(mut self: Impulse[N], freq: SIMD[DType.float64, N] = 100, trig: Float64 = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_8","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_7","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Osc/#fn-get_phase","title":"<code>fn</code> get_phase","text":""},{"location":"api/mmm_dsp/Osc/#signature_9","title":"Signature","text":"<pre><code>get_phase(mut self: Impulse[N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#returns_8","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### Dust</p> <p>A low-frequency dust noise oscillator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#parameters_7","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Osc/#functions_7","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_7","title":"<code>fn</code> next","text":"<p>Generate the next dust noise sample.</p>"},{"location":"api/mmm_dsp/Osc/#signature_10","title":"Signature","text":"<pre><code>next(mut self: Dust[N], freq: SIMD[DType.float64, N] = 100, trig: Float64 = 1) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_9","title":"Arguments","text":"<ul> <li>freq: <code>SIMD</code> = <code>100</code> </li> <li>trig: <code>Float64</code> = <code>1</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_9","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Osc/#fn-next_range","title":"<code>fn</code> next_range","text":"<p>Generate the next dust noise sample.</p>"},{"location":"api/mmm_dsp/Osc/#signature_11","title":"Signature","text":"<pre><code>next_range(mut self: Dust[N], low: SIMD[DType.float64, N] = 100, high: SIMD[DType.float64, N] = 2000, trig: Float64 = 1) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_10","title":"Arguments","text":"<ul> <li>low: <code>SIMD</code> = <code>100</code> </li> <li>high: <code>SIMD</code> = <code>2000</code> </li> <li>trig: <code>Float64</code> = <code>1</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_10","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/Osc/#fn-get_phase_1","title":"<code>fn</code> get_phase","text":""},{"location":"api/mmm_dsp/Osc/#signature_12","title":"Signature","text":"<pre><code>get_phase(mut self: Dust[N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#returns_11","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### LFNoise</p> <p>Low-frequency noise oscillator.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#functions_8","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-next_8","title":"<code>fn</code> next","text":"<p>Generate the next low-frequency noise sample.</p>"},{"location":"api/mmm_dsp/Osc/#signature_13","title":"Signature","text":"<pre><code>next(mut self, freq: Float64 = 100, interp: Int64 = 0) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_11","title":"Arguments","text":"<ul> <li>freq: <code>Float64</code> = <code>100</code> </li> <li>interp: <code>Int64</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_12","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>---### Sweep</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Osc/#functions_9","title":"Functions","text":""},{"location":"api/mmm_dsp/Osc/#fn-increment_phase_1","title":"<code>fn</code> increment_phase","text":""},{"location":"api/mmm_dsp/Osc/#signature_14","title":"Signature","text":"<pre><code>increment_phase(mut self, freq: Float64)\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_12","title":"Arguments","text":"<ul> <li>freq: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#fn-next_9","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Osc/#signature_15","title":"Signature","text":"<pre><code>next(mut self, freq: Float64 = 100, trig: Float64 = 0) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/Osc/#arguments_13","title":"Arguments","text":"<ul> <li>freq: <code>Float64</code> = <code>100</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/Osc/#returns_13","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/OscBuffers/","title":"OscBuffers","text":""},{"location":"api/mmm_dsp/OscBuffers/#sinc_interpolator","title":"Sinc_Interpolator","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/OscBuffers/#fn-next","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature","title":"Signature","text":"<pre><code>next(self, sp: Int64, sinc_offset: Int64, sinc_mult: Int64, frac: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments","title":"Arguments","text":"<ul> <li>sp: <code>Int64</code> </li> <li>sinc_offset: <code>Int64</code> </li> <li>sinc_mult: <code>Int64</code> </li> <li>frac: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>---### OscBuffers</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/OscBuffers/#fn-init_sine","title":"<code>fn</code> init_sine","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_1","title":"Signature","text":"<pre><code>init_sine(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-init_triangle","title":"<code>fn</code> init_triangle","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_2","title":"Signature","text":"<pre><code>init_triangle(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-init_sawtooth","title":"<code>fn</code> init_sawtooth","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_3","title":"Signature","text":"<pre><code>init_sawtooth(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-init_square","title":"<code>fn</code> init_square","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_4","title":"Signature","text":"<pre><code>init_square(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-init_triangle2","title":"<code>fn</code> init_triangle2","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_5","title":"Signature","text":"<pre><code>init_triangle2(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-init_sawtooth2","title":"<code>fn</code> init_sawtooth2","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_6","title":"Signature","text":"<pre><code>init_sawtooth2(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-init_square2","title":"<code>fn</code> init_square2","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_7","title":"Signature","text":"<pre><code>init_square2(mut self)\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#fn-quadratic_interp_loc","title":"<code>fn</code> quadratic_interp_loc","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_8","title":"Signature","text":"<pre><code>quadratic_interp_loc(self, x: Float64, buf_num: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_1","title":"Arguments","text":"<ul> <li>x: <code>Float64</code> </li> <li>buf_num: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#fn-lerp","title":"<code>fn</code> lerp","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_9","title":"Signature","text":"<pre><code>lerp(self, x: Float64, buf_num: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_2","title":"Arguments","text":"<ul> <li>x: <code>Float64</code> </li> <li>buf_num: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#fn-read_lin","title":"<code>fn</code> read_lin","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_10","title":"Signature","text":"<pre><code>read_lin(self, phase: Float64, buf_num: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_3","title":"Arguments","text":"<ul> <li>phase: <code>Float64</code> </li> <li>buf_num: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_3","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#fn-read_quadratic","title":"<code>fn</code> read_quadratic","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_11","title":"Signature","text":"<pre><code>read_quadratic(self, phase: Float64, buf_num: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_4","title":"Arguments","text":"<ul> <li>phase: <code>Float64</code> </li> <li>buf_num: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_4","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#fn-read_sinc","title":"<code>fn</code> read_sinc","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_12","title":"Signature","text":"<pre><code>read_sinc(self, phase: Float64, last_phase: Float64, buf_num: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_5","title":"Arguments","text":"<ul> <li>phase: <code>Float64</code> </li> <li>last_phase: <code>Float64</code> </li> <li>buf_num: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_5","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#fn-spaced_sinc","title":"<code>fn</code> spaced_sinc","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_13","title":"Signature","text":"<pre><code>spaced_sinc(self, buf_num: Int64, index: Int64, frac: Float64, spacing: Int64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_6","title":"Arguments","text":"<ul> <li>buf_num: <code>Int64</code> </li> <li>index: <code>Int64</code> </li> <li>frac: <code>Float64</code> </li> <li>spacing: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_6","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/OscBuffers/#fn-read","title":"<code>fn</code> read","text":""},{"location":"api/mmm_dsp/OscBuffers/#signature_14","title":"Signature","text":"<pre><code>read(self, phase: Float64, osc_type: Int64 = 0, interp: Int64 = 0) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/OscBuffers/#arguments_7","title":"Arguments","text":"<ul> <li>phase: <code>Float64</code> </li> <li>osc_type: <code>Int64</code> = <code>0</code> </li> <li>interp: <code>Int64</code> = <code>0</code> </li> </ul>"},{"location":"api/mmm_dsp/OscBuffers/#returns_7","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Oversampling/","title":"Oversampling","text":""},{"location":"api/mmm_dsp/Oversampling/#oversampling_1","title":"Oversampling","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Oversampling/#parameters","title":"Parameters","text":"<ol> <li>N: <code>Int</code></li> </ol>"},{"location":"api/mmm_dsp/Oversampling/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Oversampling/#fn-set_os_index","title":"<code>fn</code> set_os_index","text":""},{"location":"api/mmm_dsp/Oversampling/#signature","title":"Signature","text":"<pre><code>set_os_index(mut self, index: Int)\n</code></pre>"},{"location":"api/mmm_dsp/Oversampling/#arguments","title":"Arguments","text":"<ul> <li>index: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/Oversampling/#fn-add_sample","title":"<code>fn</code> add_sample","text":"<p>Add a sample to the oversampling buffer.</p>"},{"location":"api/mmm_dsp/Oversampling/#signature_1","title":"Signature","text":"<pre><code>add_sample(mut self, sample: SIMD[DType.float64, N])\n</code></pre>"},{"location":"api/mmm_dsp/Oversampling/#arguments_1","title":"Arguments","text":"<ul> <li>sample: <code>SIMD</code> </li> </ul>"},{"location":"api/mmm_dsp/Oversampling/#fn-get_sample","title":"<code>fn</code> get_sample","text":"<p>get the next sample from a filled oversampling buffer.</p>"},{"location":"api/mmm_dsp/Oversampling/#signature_2","title":"Signature","text":"<pre><code>get_sample(mut self) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Oversampling/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/Pan/","title":"Pan","text":""},{"location":"api/mmm_dsp/Pan/#pan2","title":"Pan2","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Pan/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/Pan/#fn-next","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Pan/#signature","title":"Signature","text":"<pre><code>next(mut self, sample: Float64, mut pan: Float64) -&gt; SIMD[DType.float64, 2]\n</code></pre>"},{"location":"api/mmm_dsp/Pan/#arguments","title":"Arguments","text":"<ul> <li>sample: <code>Float64</code> </li> <li>pan: <code>Float64</code> </li> </ul>"},{"location":"api/mmm_dsp/Pan/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### PanAz</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/Pan/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/Pan/#fn-next_1","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/Pan/#signature_1","title":"Signature","text":"<pre><code>next[N: Int](mut self, sample: Float64, pan: Float64, num_speakers: Int64, width: Float64 = 2, orientation: Float64 = 0.5) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/Pan/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/Pan/#arguments_1","title":"Arguments","text":"<ul> <li>sample: <code>Float64</code> </li> <li>pan: <code>Float64</code> </li> <li>num_speakers: <code>Int64</code> </li> <li>width: <code>Float64</code> = <code>2</code> </li> <li>orientation: <code>Float64</code> = <code>0.5</code> </li> </ul>"},{"location":"api/mmm_dsp/Pan/#returns_1","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/PlayBuf/","title":"PlayBuf","text":""},{"location":"api/mmm_dsp/PlayBuf/#playbuf_1","title":"PlayBuf","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/PlayBuf/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/PlayBuf/#fn-next","title":"<code>fn</code> next","text":"<p>get the next sample from an audio buffer - can take both Buffer or InterleavedBuffer.Arguments:     buffer: The audio buffer to read from (can be Buffer or InterleavedBuffer).     rate: The playback rate. 1 is the normal speed of the buffer.     loop: Whether to loop the buffer (default: True).     trig: Trigger starts the synth at start_frame (default: 1.0).     start_frame: The start frame for playback (default: 0) upon receiving a trigger.     end_frame: The end frame for playback (default: -1).</p>"},{"location":"api/mmm_dsp/PlayBuf/#signature","title":"Signature","text":"<pre><code>next[T: Buffable, N: Int = 1](mut self, mut buffer: T, start_chan: Int, rate: Float64, loop: Bool = True, trig: Float64 = 1, start_frame: Float64 = 0, end_frame: Float64 = -1) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_dsp/PlayBuf/#parameters","title":"Parameters","text":"<ul> <li>T: <code>Buffable</code> </li> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/PlayBuf/#arguments","title":"Arguments","text":"<ul> <li>buffer: <code>T</code> </li> <li>start_chan: <code>Int</code> </li> <li>rate: <code>Float64</code> </li> <li>loop: <code>Bool</code> = <code>True</code> </li> <li>trig: <code>Float64</code> = <code>1</code> </li> <li>start_frame: <code>Float64</code> = <code>0</code> </li> <li>end_frame: <code>Float64</code> = <code>-1</code> </li> </ul>"},{"location":"api/mmm_dsp/PlayBuf/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_dsp/PlayBuf/#fn-get_phase","title":"<code>fn</code> get_phase","text":""},{"location":"api/mmm_dsp/PlayBuf/#signature_1","title":"Signature","text":"<pre><code>get_phase(mut self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/PlayBuf/#returns_1","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_dsp/PlayBuf/#fn-get_win_phase","title":"<code>fn</code> get_win_phase","text":""},{"location":"api/mmm_dsp/PlayBuf/#signature_2","title":"Signature","text":"<pre><code>get_win_phase(mut self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_dsp/PlayBuf/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>---### Grain</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/PlayBuf/#functions_1","title":"Functions","text":""},{"location":"api/mmm_dsp/PlayBuf/#fn-next_1","title":"<code>fn</code> next","text":""},{"location":"api/mmm_dsp/PlayBuf/#signature_3","title":"Signature","text":"<pre><code>next[T: Buffable, N: Int = 1](mut self, mut buffer: T, start_chan: Int, trig: Float64 = 0, rate: Float64 = 1, start_frame: Float64 = 0, duration: Float64 = 0, pan: Float64 = 0, gain: Float64 = 1) -&gt; SIMD[DType.float64, 2]\n</code></pre>"},{"location":"api/mmm_dsp/PlayBuf/#parameters_1","title":"Parameters","text":"<ul> <li>T: <code>Buffable</code> </li> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/PlayBuf/#arguments_1","title":"Arguments","text":"<ul> <li>buffer: <code>T</code> </li> <li>start_chan: <code>Int</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>rate: <code>Float64</code> = <code>1</code> </li> <li>start_frame: <code>Float64</code> = <code>0</code> </li> <li>duration: <code>Float64</code> = <code>0</code> </li> <li>pan: <code>Float64</code> = <code>0</code> </li> <li>gain: <code>Float64</code> = <code>1</code> </li> </ul>"},{"location":"api/mmm_dsp/PlayBuf/#returns_3","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>---### TGrains</p> <p>Triggered granular synthesis. Each trigger starts a new grain.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/PlayBuf/#functions_2","title":"Functions","text":""},{"location":"api/mmm_dsp/PlayBuf/#fn-next_2","title":"<code>fn</code> next","text":"<p>Generate the next set of grains.Arguments:.     buffer: Audio buffer containing the source sound.     trig: Trigger signal (&gt;0 to start a new grain).     rate: Playback rate of the grains (1.0 = normal speed).     start_frame: Starting frame position in the buffer.     duration: Duration of each grain in seconds.     pan: Panning position from -1.0 (left) to 1.0 (right).     gain: Amplitude scaling factor for the grains.</p>"},{"location":"api/mmm_dsp/PlayBuf/#signature_4","title":"Signature","text":"<pre><code>next[T: Buffable, N: Int = 1](mut self, mut buffer: T, buf_chan: Int, trig: Float64 = 0, rate: Float64 = 1, start_frame: Float64 = 0, duration: Float64 = 0.10000000000000001, pan: Float64 = 0, gain: Float64 = 1) -&gt; SIMD[DType.float64, 2]\n</code></pre>"},{"location":"api/mmm_dsp/PlayBuf/#parameters_2","title":"Parameters","text":"<ul> <li>T: <code>Buffable</code> </li> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/PlayBuf/#arguments_2","title":"Arguments","text":"<ul> <li>buffer: <code>T</code> </li> <li>buf_chan: <code>Int</code> </li> <li>trig: <code>Float64</code> = <code>0</code> </li> <li>rate: <code>Float64</code> = <code>1</code> </li> <li>start_frame: <code>Float64</code> = <code>0</code> </li> <li>duration: <code>Float64</code> = <code>0.10000000000000001</code> </li> <li>pan: <code>Float64</code> = <code>0</code> </li> <li>gain: <code>Float64</code> = <code>1</code> </li> </ul>"},{"location":"api/mmm_dsp/PlayBuf/#returns_4","title":"Returns","text":"<p>Type: <code>SIMD</code> List of output samples for all channels.</p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/RecordBuf/","title":"RecordBuf","text":""},{"location":"api/mmm_dsp/RecordBuf/#recordbuf_1","title":"RecordBuf","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_dsp/RecordBuf/#functions","title":"Functions","text":""},{"location":"api/mmm_dsp/RecordBuf/#fn-write","title":"<code>fn</code> write","text":""},{"location":"api/mmm_dsp/RecordBuf/#signature","title":"Signature","text":"<pre><code>write[N: Int = 1](mut self, value: SIMD[DType.float64, N], mut buffer: Buffer)\n</code></pre>"},{"location":"api/mmm_dsp/RecordBuf/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code> </li> </ul>"},{"location":"api/mmm_dsp/RecordBuf/#arguments","title":"Arguments","text":"<ul> <li>value: <code>SIMD</code> </li> <li>buffer: <code>Buffer</code> </li> </ul> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_dsp/__init__/","title":"init","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_src/MMMGraphs/","title":"MMMGraphs","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_src/MMMTraits/","title":"MMMTraits","text":""},{"location":"api/mmm_src/MMMTraits/#traits","title":"Traits","text":""},{"location":"api/mmm_src/MMMTraits/#graphable","title":"Graphable","text":""},{"location":"api/mmm_src/MMMTraits/#signature","title":"Signature","text":""},{"location":"api/mmm_src/MMMTraits/#required-methods","title":"Required Methods","text":""},{"location":"api/mmm_src/MMMTraits/#next","title":"next","text":""},{"location":"api/mmm_src/MMMTraits/#signature_1","title":"Signature","text":"<pre><code>next(mut self: _Self) -&gt; List[Float64]\n</code></pre>"},{"location":"api/mmm_src/MMMTraits/#arguments","title":"Arguments","text":"<ul> <li>self: <code>_Self</code></li> </ul>"},{"location":"api/mmm_src/MMMTraits/#returns","title":"Returns","text":"<p>Type: <code>List</code></p>"},{"location":"api/mmm_src/MMMTraits/#buffable","title":"Buffable","text":""},{"location":"api/mmm_src/MMMTraits/#signature_2","title":"Signature","text":""},{"location":"api/mmm_src/MMMTraits/#required-methods_1","title":"Required Methods","text":""},{"location":"api/mmm_src/MMMTraits/#read","title":"read","text":""},{"location":"api/mmm_src/MMMTraits/#signature_3","title":"Signature","text":"<pre><code>read[N: Int = 1](mut self: _Self, start_chan: Int64, phase: Float64, interp: Int64 = 0) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_src/MMMTraits/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code></li> </ul>"},{"location":"api/mmm_src/MMMTraits/#arguments_1","title":"Arguments","text":"<ul> <li>self: <code>_Self</code>- start_chan: <code>Int64</code>- phase: <code>Float64</code>- interp: <code>Int64</code> = <code>0</code></li> </ul>"},{"location":"api/mmm_src/MMMTraits/#returns_1","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_src/MMMTraits/#get_num_frames","title":"get_num_frames","text":""},{"location":"api/mmm_src/MMMTraits/#signature_4","title":"Signature","text":"<pre><code>get_num_frames(self: _Self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_src/MMMTraits/#arguments_2","title":"Arguments","text":"<ul> <li>self: <code>_Self</code></li> </ul>"},{"location":"api/mmm_src/MMMTraits/#returns_2","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_src/MMMTraits/#get_duration","title":"get_duration","text":""},{"location":"api/mmm_src/MMMTraits/#signature_5","title":"Signature","text":"<pre><code>get_duration(self: _Self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_src/MMMTraits/#arguments_3","title":"Arguments","text":"<ul> <li>self: <code>_Self</code></li> </ul>"},{"location":"api/mmm_src/MMMTraits/#returns_3","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_src/MMMTraits/#get_buf_sample_rate","title":"get_buf_sample_rate","text":""},{"location":"api/mmm_src/MMMTraits/#signature_6","title":"Signature","text":"<pre><code>get_buf_sample_rate(self: _Self) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_src/MMMTraits/#arguments_4","title":"Arguments","text":"<ul> <li>self: <code>_Self</code></li> </ul>"},{"location":"api/mmm_src/MMMTraits/#returns_4","title":"Returns","text":"<p>Type: <code>Float64</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_src/MMMWorld/","title":"MMMWorld","text":""},{"location":"api/mmm_src/MMMWorld/#mmmworld_1","title":"MMMWorld","text":"<p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_src/MMMWorld/#functions","title":"Functions","text":""},{"location":"api/mmm_src/MMMWorld/#fn-set_channel_count","title":"<code>fn</code> set_channel_count","text":""},{"location":"api/mmm_src/MMMWorld/#signature","title":"Signature","text":"<pre><code>set_channel_count(mut self, num_in_chans: Int64, num_out_chans: Int64)\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments","title":"Arguments","text":"<ul> <li>num_in_chans: <code>Int64</code> </li> <li>num_out_chans: <code>Int64</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#fn-send_msg","title":"<code>fn</code> send_msg","text":""},{"location":"api/mmm_src/MMMWorld/#signature_1","title":"Signature","text":"<pre><code>send_msg(mut self, key: String, mut list: List[Float64])\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments_1","title":"Arguments","text":"<ul> <li>key: <code>String</code> </li> <li>list: <code>List</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#fn-get_msg","title":"<code>fn</code> get_msg","text":""},{"location":"api/mmm_src/MMMWorld/#signature_2","title":"Signature","text":"<pre><code>get_msg(mut self, key: String) -&gt; Optional[List[Float64]]\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments_2","title":"Arguments","text":"<ul> <li>key: <code>String</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#returns","title":"Returns","text":"<p>Type: <code>Optional</code></p>"},{"location":"api/mmm_src/MMMWorld/#fn-send_text_msg","title":"<code>fn</code> send_text_msg","text":""},{"location":"api/mmm_src/MMMWorld/#signature_3","title":"Signature","text":"<pre><code>send_text_msg(mut self, key: String, mut list: List[String])\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments_3","title":"Arguments","text":"<ul> <li>key: <code>String</code> </li> <li>list: <code>List</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#fn-get_text_msg","title":"<code>fn</code> get_text_msg","text":""},{"location":"api/mmm_src/MMMWorld/#signature_4","title":"Signature","text":"<pre><code>get_text_msg(mut self, key: String) -&gt; Optional[List[String]]\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments_4","title":"Arguments","text":"<ul> <li>key: <code>String</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#returns_1","title":"Returns","text":"<p>Type: <code>Optional</code></p>"},{"location":"api/mmm_src/MMMWorld/#fn-get_midi","title":"<code>fn</code> get_midi","text":""},{"location":"api/mmm_src/MMMWorld/#signature_5","title":"Signature","text":"<pre><code>get_midi(mut self, key: String, chan: Int64 = -1, param: Int64 = -1) -&gt; Optional[List[List[Int64]]]\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments_5","title":"Arguments","text":"<ul> <li>key: <code>String</code> </li> <li>chan: <code>Int64</code> = <code>-1</code> </li> <li>param: <code>Int64</code> = <code>-1</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#returns_2","title":"Returns","text":"<p>Type: <code>Optional</code></p>"},{"location":"api/mmm_src/MMMWorld/#fn-clear_midi","title":"<code>fn</code> clear_midi","text":""},{"location":"api/mmm_src/MMMWorld/#signature_6","title":"Signature","text":"<pre><code>clear_midi(mut self)\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#fn-send_midi","title":"<code>fn</code> send_midi","text":""},{"location":"api/mmm_src/MMMWorld/#signature_7","title":"Signature","text":"<pre><code>send_midi(mut self, msg: PythonObject)\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#arguments_6","title":"Arguments","text":"<ul> <li>msg: <code>PythonObject</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#raises","title":"Raises","text":""},{"location":"api/mmm_src/MMMWorld/#fn-clear_msgs","title":"<code>fn</code> clear_msgs","text":""},{"location":"api/mmm_src/MMMWorld/#signature_8","title":"Signature","text":"<pre><code>clear_msgs(mut self)\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#fn-print","title":"<code>fn</code> print","text":""},{"location":"api/mmm_src/MMMWorld/#signature_9","title":"Signature","text":"<pre><code>print[T: Writable](mut self, value: T, label: String = \"\", freq: Float64 = 10)\n</code></pre>"},{"location":"api/mmm_src/MMMWorld/#parameters","title":"Parameters","text":"<ul> <li>T: <code>Writable</code> </li> </ul>"},{"location":"api/mmm_src/MMMWorld/#arguments_7","title":"Arguments","text":"<ul> <li>value: <code>T</code> </li> <li>label: <code>String</code> = <code>\"\"</code> </li> <li>freq: <code>Float64</code> = <code>10</code> </li> </ul> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_src/__init__/","title":"init","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_utils/MMM_FFT/","title":"MMM_FFT","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_utils/MMM_FFT2/","title":"MMM_FFT2","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_utils/Print/","title":"Print","text":""},{"location":"api/mmm_utils/Print/#print_1","title":"Print","text":"<p>A struct for printing values in the MMMWorld environment.</p> <p>Parent Traits: <code>AnyType</code>, <code>Copyable</code>, <code>Movable</code>, <code>Representable</code>, <code>UnknownDestructibility</code></p>"},{"location":"api/mmm_utils/Print/#functions","title":"Functions","text":""},{"location":"api/mmm_utils/Print/#fn-next","title":"<code>fn</code> next","text":"<p>Print the value at a given frequency.Arguments:     value: The value to print.     label: An optional label to prepend to the printed value.     freq: The frequency (in Hz) at which to print the value.</p>"},{"location":"api/mmm_utils/Print/#signature","title":"Signature","text":"<pre><code>next[T: Writable](mut self, value: T, label: String = \"\", freq: Float64 = 10)\n</code></pre>"},{"location":"api/mmm_utils/Print/#parameters","title":"Parameters","text":"<ul> <li>T: <code>Writable</code> </li> </ul>"},{"location":"api/mmm_utils/Print/#arguments","title":"Arguments","text":"<ul> <li>value: <code>T</code> </li> <li>label: <code>String</code> = <code>\"\"</code> </li> <li>freq: <code>Float64</code> = <code>10</code> </li> </ul> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_utils/Windows/","title":"Windows","text":""},{"location":"api/mmm_utils/Windows/#functions","title":"Functions","text":""},{"location":"api/mmm_utils/Windows/#bessel_i0","title":"bessel_i0","text":"<p>Calculate the modified Bessel function of the first kind, order 0 (I\u2080). Uses polynomial approximation for accurate results.</p>"},{"location":"api/mmm_utils/Windows/#signature","title":"Signature","text":"<pre><code>bessel_i0(x: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_utils/Windows/#arguments","title":"Arguments","text":"<ul> <li>x: <code>Float64</code> - Input value</li> </ul>"},{"location":"api/mmm_utils/Windows/#returns","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_utils/Windows/#kaiser_window","title":"kaiser_window","text":"<p>Create a Kaiser window of length n with shape parameter beta.</p>"},{"location":"api/mmm_utils/Windows/#signature_1","title":"Signature","text":"<pre><code>kaiser_window(size: Int64, beta: Float64) -&gt; List[Float64]\n</code></pre>"},{"location":"api/mmm_utils/Windows/#arguments_1","title":"Arguments","text":"<ul> <li>size: <code>Int64</code>- beta: <code>Float64</code> - Shape parameter that controls the trade-off between main lobe width and side lobe level<ul> <li>beta = 0: rectangular window</li> <li>beta = 5: similar to Hamming window</li> <li>beta = 6: similar to Hanning window</li> <li>beta = 8.6: similar to Blackman window</li> </ul> </li> </ul>"},{"location":"api/mmm_utils/Windows/#returns_1","title":"Returns","text":"<p>Type: <code>List</code> DynamicVector[Float64] containing the Kaiser window coefficients</p>"},{"location":"api/mmm_utils/Windows/#build_sinc_table","title":"build_sinc_table","text":"<p>Build a sinc function lookup table.</p>"},{"location":"api/mmm_utils/Windows/#signature_2","title":"Signature","text":"<pre><code>build_sinc_table(size: Int64, ripples: Int64 = 4) -&gt; List[Float64]\n</code></pre>"},{"location":"api/mmm_utils/Windows/#arguments_2","title":"Arguments","text":"<ul> <li>size: <code>Int64</code> - Number of points in the table- ripples: <code>Int64</code> = <code>4</code> - Number of ripples/lobes on each side of the main lobe</li> </ul>"},{"location":"api/mmm_utils/Windows/#returns_2","title":"Returns","text":"<p>Type: <code>List</code> List containing the sinc function values</p>"},{"location":"api/mmm_utils/Windows/#hann_window","title":"hann_window","text":"<p>Generate a Hann window of length n.</p>"},{"location":"api/mmm_utils/Windows/#signature_3","title":"Signature","text":"<pre><code>hann_window(n: Int64) -&gt; List[Float64]\n</code></pre>"},{"location":"api/mmm_utils/Windows/#arguments_3","title":"Arguments","text":"<ul> <li>n: <code>Int64</code> - Length of the window</li> </ul>"},{"location":"api/mmm_utils/Windows/#returns_3","title":"Returns","text":"<p>Type: <code>List</code></p>"},{"location":"api/mmm_utils/Windows/#hamming_window","title":"hamming_window","text":"<p>Generate a Hamming window of length n.</p>"},{"location":"api/mmm_utils/Windows/#signature_4","title":"Signature","text":"<pre><code>hamming_window(n: Int64) -&gt; List[Float64]\n</code></pre>"},{"location":"api/mmm_utils/Windows/#arguments_4","title":"Arguments","text":"<ul> <li>n: <code>Int64</code></li> </ul>"},{"location":"api/mmm_utils/Windows/#returns_4","title":"Returns","text":"<p>Type: <code>List</code></p>"},{"location":"api/mmm_utils/Windows/#blackman_window","title":"blackman_window","text":"<p>Generate a Blackman window of length n. Args:     n: Length of the window Returns:     List containing the Blackman window values</p>"},{"location":"api/mmm_utils/Windows/#signature_5","title":"Signature","text":"<pre><code>blackman_window(n: Int64) -&gt; List[Float64]\n</code></pre>"},{"location":"api/mmm_utils/Windows/#arguments_5","title":"Arguments","text":"<ul> <li>n: <code>Int64</code></li> </ul>"},{"location":"api/mmm_utils/Windows/#returns_5","title":"Returns","text":"<p>Type: <code>List</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_utils/__init__/","title":"init","text":"<p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"api/mmm_utils/functions/","title":"functions","text":"<p>MMM Utility Functions</p> <p>This module provides essential utility functions for audio processing and mathematical operations in the MMMAudio framework. All functions are optimized for SIMD operations to achieve maximum performance on modern processors.</p> <p>The functions in this module include: - Range mapping functions (linear and exponential) - Clipping and wrapping utilities - Interpolation algorithms - MIDI/frequency conversion - Audio utility functions - Random number generation</p> <p>All functions support vectorized operations through SIMD types for processing multiple values simultaneously.</p>"},{"location":"api/mmm_utils/functions/#functions_1","title":"Functions","text":""},{"location":"api/mmm_utils/functions/#linlin","title":"linlin","text":"<p>Maps values from one range to another range linearly.</p> <p>This function performs linear mapping from an input range to an output range. Values outside the input range are clamped to the corresponding output boundaries. This is commonly used for scaling control values, normalizing data, and  converting between different parameter ranges.</p> <p>Examples: <pre><code># Map MIDI velocity (0-127) to gain (0.0-1.0)\nvelocity = SIMD[DType.float64, 1](64.0)\ngain = linlin(velocity, 0.0, 127.0, 0.0, 1.0)  # Returns 0.504\n\n# Map multiple control values simultaneously\ncontrols = SIMD[DType.float64, 4](0.25, 0.5, 0.75, 1.0)\nfrequencies = linlin[4](controls, 0.0, 1.0, 20.0, 20000.0)\n\n# Invert a normalized range\nnormal_vals = SIMD[DType.float64, 2](0.3, 0.7)\ninverted = linlin[2](normal_vals, 0.0, 1.0, 1.0, 0.0)\n</code></pre></p>"},{"location":"api/mmm_utils/functions/#signature","title":"Signature","text":"<pre><code>linlin[N: Int = 1](value: SIMD[DType.float64, N], in_min: SIMD[DType.float64, N], in_max: SIMD[DType.float64, N], out_min: SIMD[DType.float64, N], out_max: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - Size of the SIMD vector (defaults to 1).</li> </ul>"},{"location":"api/mmm_utils/functions/#arguments","title":"Arguments","text":"<ul> <li>value: <code>SIMD</code> - The values to map.- in_min: <code>SIMD</code> - The minimum of the input range.- in_max: <code>SIMD</code> - The maximum of the input range.- out_min: <code>SIMD</code> - The minimum of the output range.- out_max: <code>SIMD</code> - The maximum of the output range.</li> </ul>"},{"location":"api/mmm_utils/functions/#returns","title":"Returns","text":"<p>Type: <code>SIMD</code> The linearly mapped values in the output range.</p>"},{"location":"api/mmm_utils/functions/#linexp","title":"linexp","text":"<p>Maps values from one linear range to another exponential range.</p> <p>This function performs exponential mapping from a linear input range to an exponential output range. This is essential for musical applications where frequency perception is logarithmic. Both output range values must be positive.</p> <p>Examples: <pre><code># Map linear slider (0-1) to frequency range (20Hz-20kHz)\nslider_pos = SIMD[DType.float64, 1](0.5)\nfrequency = linexp(slider_pos, 0.0, 1.0, 20.0, 20000.0)  # \u2248 632 Hz\n\n# Map MIDI controller to filter cutoff frequencies\ncc_values = SIMD[DType.float64, 4](0.0, 0.33, 0.66, 1.0)\ncutoffs = linexp[4](cc_values, 0.0, 1.0, 100.0, 10000.0)\n\n# Create exponential envelope shape\nlinear_time = SIMD[DType.float64, 1](0.8)\nexp_amplitude = linexp(linear_time, 0.0, 1.0, 0.001, 1.0)\n</code></pre></p>"},{"location":"api/mmm_utils/functions/#signature_1","title":"Signature","text":"<pre><code>linexp[N: Int = 1](value: SIMD[DType.float64, N], in_min: SIMD[DType.float64, N], in_max: SIMD[DType.float64, N], out_min: SIMD[DType.float64, N], out_max: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_1","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - Size of the SIMD vector (defaults to 1).</li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_1","title":"Arguments","text":"<ul> <li>value: <code>SIMD</code> - The values to map.- in_min: <code>SIMD</code> - The minimum of the input range.- in_max: <code>SIMD</code> - The maximum of the input range.- out_min: <code>SIMD</code> - The minimum of the output range (must be &gt; 0).- out_max: <code>SIMD</code> - The maximum of the output range (must be &gt; 0).</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_1","title":"Returns","text":"<p>Type: <code>SIMD</code> The exponentially mapped values in the output range.</p>"},{"location":"api/mmm_utils/functions/#clip","title":"clip","text":"<p>Clips each element in the SIMD vector to the specified range. Parameters:     N: size of the SIMD vector - defaults to 1 Args:     val: The SIMD vector to clip. Each element will be clipped individually.     lo: The minimum value.     hi: The maximum value. Returns:     The clipped SIMD vector.</p>"},{"location":"api/mmm_utils/functions/#signature_2","title":"Signature","text":"<pre><code>clip[N: Int = 1](val: SIMD[DType.float64, N], lo: SIMD[DType.float64, N], hi: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_2","title":"Parameters","text":"<ul> <li>N: <code>Int</code></li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_2","title":"Arguments","text":"<ul> <li>val: <code>SIMD</code>- lo: <code>SIMD</code>- hi: <code>SIMD</code></li> </ul>"},{"location":"api/mmm_utils/functions/#returns_2","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_utils/functions/#wrap","title":"wrap","text":"<p>Wraps a value around a specified range. Parameters:     N: size of the SIMD vector - defaults to 1.</p>"},{"location":"api/mmm_utils/functions/#signature_3","title":"Signature","text":"<pre><code>wrap[N: Int = 1](value: SIMD[DType.float64, N], min_val: SIMD[DType.float64, N], max_val: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_3","title":"Parameters","text":"<ul> <li>N: <code>Int</code></li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_3","title":"Arguments","text":"<ul> <li>value: <code>SIMD</code> - The value to wrap.- min_val: <code>SIMD</code> - The minimum of the range.- max_val: <code>SIMD</code> - The maximum of the range.</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_3","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>Wraps a value around a specified range.</p>"},{"location":"api/mmm_utils/functions/#signature_4","title":"Signature","text":"<pre><code>wrap[N: Int = 1](value: SIMD[DType.int64, N], min_val: SIMD[DType.int64, N], max_val: SIMD[DType.int64, N]) -&gt; SIMD[DType.int64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_4","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - Size of the SIMD vector - defaults to 1.</li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_4","title":"Arguments","text":"<ul> <li>value: <code>SIMD</code> - The value to wrap.- min_val: <code>SIMD</code> - The minimum of the range.- max_val: <code>SIMD</code> - The maximum of the range.</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_4","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_utils/functions/#quadratic_interp","title":"quadratic_interp","text":"<p>Performs quadratic interpolation between three points.</p>"},{"location":"api/mmm_utils/functions/#signature_5","title":"Signature","text":"<pre><code>quadratic_interp(y0: Float64, y1: Float64, y2: Float64, x: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_utils/functions/#arguments_5","title":"Arguments","text":"<ul> <li>y0: <code>Float64</code> - The value at position 0.- y1: <code>Float64</code> - The value at position 1.- y2: <code>Float64</code> - The value at position 2.- x: <code>Float64</code> - The interpolation position (typically between 0 and 2).</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_5","title":"Returns","text":"<p>Type: <code>Float64</code> The interpolated value at position x.</p>"},{"location":"api/mmm_utils/functions/#cubic_interp","title":"cubic_interp","text":"<p>Performs cubic interpolation between.</p> <p>Cubic Intepolation equation from The Audio Programming Book  by Richard Boulanger and Victor Lazzarini. pg. 400</p>"},{"location":"api/mmm_utils/functions/#signature_6","title":"Signature","text":"<pre><code>cubic_interp(p0: Float64, p1: Float64, p2: Float64, p3: Float64, t: Float64) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_utils/functions/#arguments_6","title":"Arguments","text":"<ul> <li>p0: <code>Float64</code> - Point to the left of p1.- p1: <code>Float64</code> - Point to the left of the float t.- p2: <code>Float64</code> - Point to the right of the float t.- p3: <code>Float64</code> - Point to the right of p2.- t: <code>Float64</code> - Interpolation parameter (0.0 to 1.0).</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_6","title":"Returns","text":"<p>Type: <code>Float64</code> Interpolated value.</p>"},{"location":"api/mmm_utils/functions/#lagrange4","title":"lagrange4","text":"<p>Perform Lagrange interpolation for 4th order case (from JOS Faust Model). This is extrapolated from the JOS Faust filter model.</p> <p>lagrange4N -&gt; SIMD[Float64, N]</p>"},{"location":"api/mmm_utils/functions/#signature_7","title":"Signature","text":"<pre><code>lagrange4[N: Int = 1](sample0: SIMD[DType.float64, N], sample1: SIMD[DType.float64, N], sample2: SIMD[DType.float64, N], sample3: SIMD[DType.float64, N], sample4: SIMD[DType.float64, N], frac: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_5","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - Size of the SIMD vector - defaults to 1.</li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_7","title":"Arguments","text":"<ul> <li>sample0: <code>SIMD</code> - The first sample.- sample1: <code>SIMD</code> - The second sample.- sample2: <code>SIMD</code> - The third sample.- sample3: <code>SIMD</code> - The fourth sample.- sample4: <code>SIMD</code> - The fifth sample.- frac: <code>SIMD</code> - The fractional delay (0.0 to 1.0) which is the location between sample0 and sample1.</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_7","title":"Returns","text":"<p>Type: <code>SIMD</code> The interpolated value.</p>"},{"location":"api/mmm_utils/functions/#lerp","title":"lerp","text":"<p>Performs linear interpolation between two points.</p> <p>lerpN -&gt; Float64 or SIMD[Float64, N]</p>"},{"location":"api/mmm_utils/functions/#signature_8","title":"Signature","text":"<pre><code>lerp[N: Int = 1](p0: SIMD[DType.float64, N], p1: SIMD[DType.float64, N], t: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_6","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - Size of the SIMD vector - defaults to 1.</li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_8","title":"Arguments","text":"<ul> <li>p0: <code>SIMD</code> - The starting point.- p1: <code>SIMD</code> - The ending point.- t: <code>SIMD</code> - The interpolation parameter (0.0 to 1.0).</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_8","title":"Returns","text":"<p>Type: <code>SIMD</code> The interpolated value.</p>"},{"location":"api/mmm_utils/functions/#midicps","title":"midicps","text":""},{"location":"api/mmm_utils/functions/#signature_9","title":"Signature","text":"<pre><code>midicps(midi_note_number: Int64, reference_midi_note: Int64 = 69, reference_frequency: Float64 = 440) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_utils/functions/#arguments_9","title":"Arguments","text":"<ul> <li>midi_note_number: <code>Int64</code>- reference_midi_note: <code>Int64</code> = <code>69</code>- reference_frequency: <code>Float64</code> = <code>440</code></li> </ul>"},{"location":"api/mmm_utils/functions/#returns_9","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_utils/functions/#signature_10","title":"Signature","text":"<pre><code>midicps(midi_note_number: Float64, reference_midi_note: Float64 = 69, reference_frequency: Float64 = 440) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_utils/functions/#arguments_10","title":"Arguments","text":"<ul> <li>midi_note_number: <code>Float64</code>- reference_midi_note: <code>Float64</code> = <code>69</code>- reference_frequency: <code>Float64</code> = <code>440</code></li> </ul>"},{"location":"api/mmm_utils/functions/#returns_10","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_utils/functions/#cpsmidi","title":"cpsmidi","text":""},{"location":"api/mmm_utils/functions/#signature_11","title":"Signature","text":"<pre><code>cpsmidi(freq: Float64, reference_midi_note: Float64 = 69, reference_frequency: Float64 = 440) -&gt; Float64\n</code></pre>"},{"location":"api/mmm_utils/functions/#arguments_11","title":"Arguments","text":"<ul> <li>freq: <code>Float64</code>- reference_midi_note: <code>Float64</code> = <code>69</code>- reference_frequency: <code>Float64</code> = <code>440</code></li> </ul>"},{"location":"api/mmm_utils/functions/#returns_11","title":"Returns","text":"<p>Type: <code>Float64</code></p>"},{"location":"api/mmm_utils/functions/#mix","title":"mix","text":""},{"location":"api/mmm_utils/functions/#signature_12","title":"Signature","text":"<pre><code>mix(mut output: List[Float64], *lists: List[Float64])\n</code></pre>"},{"location":"api/mmm_utils/functions/#arguments_12","title":"Arguments","text":"<ul> <li>output: <code>List</code>- *lists: <code>List</code></li> </ul>"},{"location":"api/mmm_utils/functions/#sanitize","title":"sanitize","text":""},{"location":"api/mmm_utils/functions/#signature_13","title":"Signature","text":"<pre><code>sanitize[N: Int = 1](x: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_7","title":"Parameters","text":"<ul> <li>N: <code>Int</code></li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_13","title":"Arguments","text":"<ul> <li>x: <code>SIMD</code></li> </ul>"},{"location":"api/mmm_utils/functions/#returns_12","title":"Returns","text":"<p>Type: <code>SIMD</code></p>"},{"location":"api/mmm_utils/functions/#random_exp_float64","title":"random_exp_float64","text":"<p>Generates a random float64 value from an exponential distribution.</p>"},{"location":"api/mmm_utils/functions/#signature_14","title":"Signature","text":"<pre><code>random_exp_float64[N: Int = 1](min: SIMD[DType.float64, N], max: SIMD[DType.float64, N]) -&gt; SIMD[DType.float64, N]\n</code></pre>"},{"location":"api/mmm_utils/functions/#parameters_8","title":"Parameters","text":"<ul> <li>N: <code>Int</code> - Size of the SIMD vector - defaults to 1.</li> </ul>"},{"location":"api/mmm_utils/functions/#arguments_14","title":"Arguments","text":"<ul> <li>min: <code>SIMD</code> - The minimum value (inclusive).- max: <code>SIMD</code> - The maximum value (inclusive).</li> </ul>"},{"location":"api/mmm_utils/functions/#returns_13","title":"Returns","text":"<p>Type: <code>SIMD</code></p> <p>Documentation generated with `mojo doc' from Mojo version 0.25.6.0.dev2025090605</p>"},{"location":"contributing/","title":"Overview","text":"<p>test</p>"},{"location":"contributing/contributing/","title":"Contributing to MMMAudio","text":"<p>Thank you for your interest in contributing to MMMAudio! This guide will help you get started.</p>"},{"location":"contributing/contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>Mojo compiler (latest version)</li> <li>Git</li> </ul>"},{"location":"contributing/contributing/#installation","title":"Installation","text":"<ol> <li>Fork and clone the repository:</li> </ol> <pre><code>git clone https://github.com/your-username/MMMAudio.git\ncd MMMAudio\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>pip install -r requirements-docs.txt\n</code></pre> <ol> <li>Verify the setup:</li> </ol> <pre><code>python -c \"import mmm_src.MMMAudio; print('Python setup OK')\"\nmojo --version\n</code></pre>"},{"location":"contributing/contributing/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"contributing/contributing/#code-style","title":"Code Style","text":""},{"location":"contributing/contributing/#python-code","title":"Python Code","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use type hints for all function signatures</li> <li>Use Google-style docstrings</li> <li>Maximum line length: 88 characters (Black formatter)</li> </ul>"},{"location":"contributing/contributing/#mojo-code","title":"Mojo Code","text":"<ul> <li>Follow Mojo style conventions</li> <li>Use SIMD types for performance-critical code</li> <li>Document all public functions with examples</li> <li>Use descriptive variable names</li> </ul>"},{"location":"contributing/contributing/#documentation","title":"Documentation","text":"<ul> <li>All public APIs must be documented</li> <li>Include practical examples for each function</li> <li>Update documentation when changing functionality</li> <li>Use the documentation templates in <code>documentation/</code></li> </ul>"},{"location":"contributing/contributing/#testing","title":"Testing","text":"<ul> <li>Add tests for new functionality</li> <li>Ensure existing tests pass</li> <li>Test both Python and Mojo implementations</li> <li>Include performance benchmarks for critical paths</li> </ul>"},{"location":"contributing/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes with clear, atomic commits</p> </li> <li> <p>Update documentation and tests</p> </li> <li> <p>Generate and review documentation:    <pre><code>python documentation/generate_docs.py\nmkdocs serve\n</code></pre></p> </li> <li> <p>Submit a pull request with:</p> </li> <li>Clear description of changes</li> <li>Rationale for the changes</li> <li>Any breaking changes noted</li> <li>Screenshots of documentation updates</li> </ol>"},{"location":"contributing/contributing/#issue-reporting","title":"Issue Reporting","text":"<p>When reporting issues: - Use the issue templates - Include minimal reproduction case - Specify OS and version information - Include relevant error messages and logs</p>"},{"location":"contributing/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/contributing/#adding-new-dsp-functions","title":"Adding New DSP Functions","text":"<ol> <li>Implement in Mojo for performance (in <code>mmm_dsp/</code>)</li> <li>Add comprehensive documentation with examples</li> <li>Create Python wrapper if needed (in <code>mmm_src/</code>)</li> <li>Add tests demonstrating functionality</li> <li>Update relevant examples</li> </ol>"},{"location":"contributing/contributing/#adding-new-examples","title":"Adding New Examples","text":"<ol> <li>Create example in <code>examples/</code> directory</li> <li>Include clear documentation in docstring</li> <li>Ensure example runs without errors</li> <li>Add to examples index in documentation</li> </ol>"},{"location":"contributing/contributing/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Profile before optimizing</li> <li>Use SIMD operations where possible</li> <li>Benchmark against reference implementations</li> <li>Document performance characteristics</li> </ul>"},{"location":"contributing/contributing/#community","title":"Community","text":""},{"location":"contributing/contributing/#communication","title":"Communication","text":"<ul> <li>GitHub Issues: Bug reports and feature requests</li> <li>Discussions: General questions and community interaction</li> <li>Pull Requests: Code contributions and reviews</li> </ul>"},{"location":"contributing/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and constructive in all interactions. We're building a welcoming community for audio developers of all skill levels.</p>"},{"location":"contributing/contributing/#release-process","title":"Release Process","text":"<p>Releases follow semantic versioning: - Major: Breaking changes - Minor: New features (backward compatible) - Patch: Bug fixes</p> <p>Documentation is automatically built and deployed with each release.</p>"},{"location":"contributing/documentation/","title":"Documentation Guide","text":"<p>This guide explains how to write and maintain documentation for MMMAudio.</p>"},{"location":"contributing/documentation/#documentation-structure","title":"Documentation Structure","text":"<p>MMMAudio uses MkDocs with Material theme for documentation generation. The documentation supports both Python and Mojo source files through different processing pipelines.</p>"},{"location":"contributing/documentation/#python-documentation","title":"Python Documentation","text":"<p>Python files are documented using Google-style docstrings and processed by mkdocstrings:</p> <pre><code>def example_function(param1: int, param2: str = \"default\") -&gt; bool:\n    \"\"\"Brief description of the function.\n\n    Longer description with more details about what the function does,\n    its intended use cases, and any important behavior notes.\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter with default value.\n\n    Returns:\n        Description of the return value.\n\n    Raises:\n        ValueError: When param1 is negative.\n\n    Examples:\n        Basic usage:\n\n        ```python\n        result = example_function(42, \"test\")\n        ```\n\n        With default parameter:\n\n        ```python\n        result = example_function(42)\n        ```\n    \"\"\"\n    return param1 &gt; 0\n</code></pre>"},{"location":"contributing/documentation/#mojo-documentation","title":"Mojo Documentation","text":"<p>Mojo files are documented using triple-quoted docstrings and processed by our custom adapter:</p> <pre><code>fn example_function[N: Int = 1](\n    param1: SIMD[DType.int32, N], \n    param2: SIMD[DType.float64, N] = 1.0\n) -&gt; SIMD[DType.bool, N]:\n    \"\"\"Brief description of the function.\n\n    Longer description with details about the function's behavior,\n    SIMD optimization, and usage patterns.\n\n    Parameters:\n        N: SIMD vector width (defaults to 1).\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter with default.\n\n    Returns:\n        Description of the return value.\n\n    Examples:\n        Single value processing:\n\n        ```mojo\n        result = example_function(42, 1.5)\n        ```\n\n        Vectorized processing:\n\n        ```mojo\n        values = SIMD[DType.int32, 4](1, 2, 3, 4)\n        factors = SIMD[DType.float64, 4](1.0, 1.5, 2.0, 2.5)\n        results = example_function[4](values, factors)\n        ```\n    \"\"\"\n    return param1 &gt; 0\n</code></pre>"},{"location":"contributing/documentation/#building-documentation","title":"Building Documentation","text":""},{"location":"contributing/documentation/#prerequisites","title":"Prerequisites","text":"<p>Install documentation dependencies:</p> <pre><code>pip install -r requirements-docs.txt\n</code></pre>"},{"location":"contributing/documentation/#generate-documentation","title":"Generate Documentation","text":"<p>Run the documentation pipeline:</p> <pre><code>python documentation/generate_docs.py\n</code></pre> <p>This will: 1. Process all Mojo files and extract documentation 2. Create markdown stubs for Python files 3. Generate example documentation 4. Build the complete documentation site  </p>"},{"location":"contributing/documentation/#serve-locally","title":"Serve Locally","text":"<p>To preview the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>The documentation will be available at <code>http://localhost:8000</code>.</p>"},{"location":"contributing/documentation/#build-for-production","title":"Build for Production","text":"<p>To build the static documentation site:</p> <pre><code>mkdocs build\n</code></pre> <p>This creates a <code>site/</code> directory with the complete documentation.</p>"},{"location":"contributing/documentation/#build-pdf","title":"Build PDF","text":"<p>To generate a PDF version:</p> <pre><code>mkdocs build\n# PDF is generated automatically by mkdocs-pdf plugin\n</code></pre>"},{"location":"contributing/documentation/#documentation-standards","title":"Documentation Standards","text":""},{"location":"contributing/documentation/#writing-guidelines","title":"Writing Guidelines","text":"<ol> <li>Be Clear and Concise: Use simple, direct language</li> <li>Include Examples: Every function should have practical examples</li> <li>Explain SIMD Usage: For Mojo functions, explain vectorization benefits</li> <li>Cross-Reference: Link to related functions and concepts</li> <li>Keep Updated: Update docs when code changes</li> </ol>"},{"location":"contributing/documentation/#code-examples","title":"Code Examples","text":"<ul> <li>Use real, runnable code examples</li> <li>Show both basic and advanced usage</li> <li>Include expected output when helpful</li> <li>Demonstrate error conditions when relevant</li> </ul>"},{"location":"contributing/documentation/#function-documentation","title":"Function Documentation","text":"<p>Required sections: - Brief description (first line) - Detailed description  - Parameters/Args with types and descriptions - Returns section - Examples section</p> <p>Optional sections: - Raises (for error conditions) - Notes (for implementation details) - See Also (for related functions)</p>"},{"location":"contributing/documentation/#maintenance","title":"Maintenance","text":""},{"location":"contributing/documentation/#regular-updates","title":"Regular Updates","text":"<ul> <li>Review documentation when adding new features</li> <li>Update examples to use current best practices</li> <li>Check for broken links and outdated information</li> <li>Ensure all public APIs are documented</li> </ul>"},{"location":"contributing/documentation/#documentation-reviews","title":"Documentation Reviews","text":"<p>Include documentation updates in code reviews: - Verify new functions are documented - Check that examples are correct and clear - Ensure docstring formatting is consistent - Validate that generated docs look correct</p>"},{"location":"examples/","title":"Examples","text":"<p>This section contains practical examples demonstrating how to use MMMAudio for various audio processing tasks.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":"<ul> <li>Default Graph: Basic audio graph setup</li> <li>In2Out: Simple input to output routing</li> </ul>"},{"location":"examples/#synthesis-examples","title":"Synthesis Examples","text":"<ul> <li>Many Oscillators: Multiple oscillator management</li> <li>Grains: Granular synthesis techniques</li> </ul>"},{"location":"examples/#effects-examples","title":"Effects Examples","text":"<ul> <li>Feedback Delays: Delay-based effects</li> <li>Pan Az: Spatial audio panning</li> </ul>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":"<ul> <li>MIDI Sequencer: MIDI-controlled sequencing</li> <li>Torch MLP: Neural network audio processing</li> <li>Record: Audio recording and playback</li> </ul>"},{"location":"examples/#running-examples","title":"Running Examples","text":"<p>Most examples can be run directly with Python:</p> <pre><code>python examples/default.py\n</code></pre> <p>Or with Mojo for the .mojo examples:</p> <pre><code>mojo examples/Default_Graph.mojo\n</code></pre>"},{"location":"examples/FeedbackDelays/","title":"FeedbackDelays","text":"<p>use the mouse to control an overdriven feedback delay</p> <pre><code>from mmm_src.MMMAudio import MMMAudio\n\nmmm_audio = MMMAudio(128, graph_name=\"FeedbackDelays\", package_name=\"examples\")\n\nmmm_audio.start_audio() # start the audio thread - or restart it where it left off\nmmm_audio.stop_audio() # stop/pause the audio thread\n</code></pre>"},{"location":"examples/ManyOscillators/","title":"ManyOscillators","text":"<p>Example showing how to use ManyOscillators.mojo with MMMAudio.</p> <p>You can change the number of oscillators dynamically by sending a 'set_num_pairs' message.</p> <pre><code>from mmm_src.MMMAudio import MMMAudio\n\nmmm_audio = MMMAudio(128, graph_name=\"ManyOscillators\", package_name=\"examples\")\n\nmmm_audio.start_audio() # start the audio thread - or restart it where it left off\n\nmmm_audio.send_msg(\"set_num_pairs\", 2)  # set to 2 pairs of oscillators\n\nmmm_audio.send_msg(\"set_num_pairs\", 14)  # change to 4 pairs of oscillators\n\nmmm_audio.send_msg(\"set_num_pairs\", 50)  # change to 4 pairs of oscillators\n\nmmm_audio.stop_audio() # stop/pause the audio thread\n</code></pre>"},{"location":"examples/Midi_Sequencer/","title":"Midi_Sequencer","text":"<pre><code>from mmm_src.MMMAudio import MMMAudio\n\n# instantiate and load the graph\nmmm_audio = MMMAudio(128, graph_name=\"Midi_Sequencer\", package_name=\"examples\")\nmmm_audio.start_audio()\n\n# this next chunk of code is all about using a midi keyboard to control the synth---------------\n\n# the python host grabs the midi and sends the midi messages to the mojo audio engine\n\nimport mido\nimport time\nimport threading\n\n# find your midi devices\nmido.get_input_names()\n\n# open your midi device - you may need to change the device name\nin_port = mido.open_input('Oxygen Pro Mini USB MIDI')\n\ndef start_midi():\n    while True:\n        for msg in in_port.iter_pending():\n            # print(msg)\n            mmm_audio.send_midi(msg)\n        time.sleep(0.01) # Small delay to prevent busy-waiting\n\nmidi_thread = threading.Thread(target=start_midi, daemon=True)\n# once you start the midi_thread, it should register note_on, note_off, cc, etc from your device and send them to mmm\nmidi_thread.start()\nmidi_thread.stop()\n\n# this chunk of code shows how to use the sequencer to trigger notes in the mmm_audio engine\n\n# the scheduler can also sequence notes\nfrom mmm_src.Patterns import * # some sc style patterns\nimport numpy as np\nimport asyncio\nimport librosa\n\nscheduler = mmm_audio.scheduler\n\nasync def trig_synth(wait):\n    \"\"\"A counter coroutine\"\"\"\n    count_to = np.random.choice([7, 11, 13, 17]).item()\n    mult_seq = Pseq(list(range(1, count_to + 1)))\n    fund_seq = Pxrand([36, 37, 43, 42])\n    i = 0\n    fund = librosa.midi_to_hz(fund_seq.next())\n    while True:\n        pitch = mult_seq.next() * fund\n        mmm_audio.send_msg(\"t_trig\", 1.0)\n        mmm_audio.send_msg(\"trig_seq_freq\", pitch)\n        await asyncio.sleep(wait)\n        i = (i + 1) % count_to\n        if i == 0:\n            fund = librosa.midi_to_hz(fund_seq.next())\n            count_to = np.random.choice([7, 11, 13, 17]).item()\n            mult_seq = Pseq(list(range(1, count_to + 1)))\n\nscheduler.sched(trig_synth(0.1))\n\nscheduler.stop_routs()\n\nmmm_audio.stop_audio()\nmmm_audio.start_audio()\n</code></pre>"},{"location":"examples/Midi_Sequencer/#examples.Midi_Sequencer.trig_synth","title":"<code>trig_synth(wait)</code>  <code>async</code>","text":"<p>A counter coroutine</p> Source code in <code>examples/Midi_Sequencer.py</code> <pre><code>async def trig_synth(wait):\n    \"\"\"A counter coroutine\"\"\"\n    count_to = np.random.choice([7, 11, 13, 17]).item()\n    mult_seq = Pseq(list(range(1, count_to + 1)))\n    fund_seq = Pxrand([36, 37, 43, 42])\n    i = 0\n    fund = librosa.midi_to_hz(fund_seq.next())\n    while True:\n        pitch = mult_seq.next() * fund\n        mmm_audio.send_msg(\"t_trig\", 1.0)\n        mmm_audio.send_msg(\"trig_seq_freq\", pitch)\n        await asyncio.sleep(wait)\n        i = (i + 1) % count_to\n        if i == 0:\n            fund = librosa.midi_to_hz(fund_seq.next())\n            count_to = np.random.choice([7, 11, 13, 17]).item()\n            mult_seq = Pseq(list(range(1, count_to + 1)))\n</code></pre>"},{"location":"examples/OleDusty/","title":"OleDusty","text":"<pre><code>from mmm_src.MMMAudio import MMMAudio \n\n# instantiate and load the graph\nmmm_audio = MMMAudio(128, graph_name=\"OleDusty\", package_name=\"examples\")\nmmm_audio.start_audio()\n</code></pre>"},{"location":"examples/Pan_Az/","title":"Pan_Az","text":"<pre><code>from mmm_src.MMMAudio import MMMAudio\n\n\n# instantiate and load the graph\n\n# PanAz is not quite right as of yet\nmmm_audio = MMMAudio(128, graph_name=\"Pan_Az\", package_name=\"examples\", num_output_channels=5)\nmmm_audio.start_audio() \n\nmmm_audio.stop_audio()\n\nfrom random import random\nmmm_audio.send_msg(\"osc_freq\", random() * 500 + 100 ) # set the frequency to a random value\n</code></pre>"},{"location":"examples/PlayBuf/","title":"PlayBuf","text":"<pre><code>from mmm_src.MMMAudio import MMMAudio\nimport asyncio\nimport threading\n\n\nmmm_audio = MMMAudio(128, graph_name=\"PlayBuf_Graph\", package_name=\"examples\")\n\nmmm_audio.start_audio() # start the audio thread - or restart it where it left off\n\n# this example uses open sound control to control PlayBuf's playback speed and VAMoogFilter's cutoff frequency\n# there is a simple touchosc patch provided for control\n# it is looking for /fader1 and /fader2 on port 5005; these can be adjusted\n# Start the OSC server on its own thread\n# this is a bug, but this thread has to start after audio or audio won't start\nthread = threading.Thread(target=asyncio.run, args=(mmm_audio.start_osc_server(5005),), daemon=True)\nthread.start()\n\n# if touch_osc isn't available you can also send the messages directly\nmmm_audio.send_msg(\"/fader1\", 0.5) # fader value is mapped exponentially between 0.25 and 4\nmmm_audio.send_msg(\"/fader1\", 0.25) \n\nmmm_audio.send_msg(\"/fader2\", 0.5) # fader value is mapped exponentially between 20 and 20000\nmmm_audio.send_msg(\"/fader2\", 1) \n\nmmm_audio.stop_audio() # stop/pause the audio thread\n</code></pre>"},{"location":"examples/default/","title":"default","text":"<p>use this as a template for your own graphs</p> <pre><code>from mmm_src.MMMAudio import MMMAudio\n\n\n# instantiate and load the graph\nmmm_audio = MMMAudio(128, graph_name=\"Default_Graph\", package_name=\"examples\")\nmmm_audio.start_audio() \n\nfrom random import random\nmmm_audio.send_msg(\"osc_freq\", random() * 500 + 100 ) # set the frequency to a random value\n</code></pre>"},{"location":"examples/grains/","title":"grains","text":"<p>this uses the mouse to control granular playback of the buffer left and right moves around in the buffer. up and down controls rate of triggers.</p> <pre><code>from mmm_src.MMMAudio import MMMAudio\n\nmmm_audio = MMMAudio(128, graph_name=\"Grains\", package_name=\"examples\")\n\nmmm_audio.start_audio() # start the audio thread - or restart it where it left off\nmmm_audio.stop_audio() # stop/pause the audio thread\n</code></pre>"},{"location":"examples/in2out/","title":"in2out","text":"<p>This is the simples MMMAudio example. It routes input channels directly to output channels. It also demonstrates how to send a message to the graph to print the current input values to the REPL.</p> <pre><code>from mmm_src.MMMAudio import *\n\n# this will list available audio devices\nlist_audio_devices()\n\nin_device = \"Fireface UFX+ (24059506)\"\nout_device = \"Fireface UFX+ (24059506)\"\n\n# or get some feedback\nin_device = \"MacBook Pro Microphone\"\nout_device = \"External Headphones\"\n\n# instantiate and load the graph\nmmm_audio = MMMAudio(128, num_input_channels=12, num_output_channels=12, in_device=in_device, out_device=out_device, graph_name=\"In2Out\", package_name=\"examples\")\nmmm_audio.start_audio()\n\n# print the current sample of inputs to the REPL\nmmm_audio.send_msg(\"print_inputs\")  \n\nmmm_audio.stop_audio()\n</code></pre>"},{"location":"examples/record/","title":"record","text":"<pre><code>from mmm_src.MMMAudio import *\nlist_audio_devices()\n\nin_device = \"Fireface UFX+ (24059506)\"\nout_device = \"Fireface UFX+ (24059506)\"\n\nin_device = \"MacBook Pro Microphone\"\nout_device = \"External Headphones\"\n\n\n\n# instantiate and load the graph\nmmm_audio = MMMAudio(128, num_input_channels=12, num_output_channels=12, in_device=in_device, out_device=out_device, graph_name=\"Record\", package_name=\"examples\")\n\n# the default input channel (in the Record_Synth) is 0, but you can change it to \nmmm_audio.send_msg(\"set_input_chan\", 0) \nmmm_audio.start_audio() \n\n\n\nmmm_audio.send_msg(\"print_inputs\")\n\n# this program is looking for midi note_on and note_off from note 48, so we prepare the keyboard to send messages to mmm_audio:\n\nimport mido\nimport time\nimport threading\n\n# find your midi devices\nmido.get_input_names()\n\n# open your midi device - you may need to change the device name\nin_port = mido.open_input('Oxygen Pro Mini USB MIDI')\n\ndef start_midi():\n    while True:\n        for msg in in_port.iter_pending():\n            print(msg)\n            mmm_audio.send_midi(msg)\n        time.sleep(0.01) # Small delay to prevent busy-waiting\n\nmidi_thread = threading.Thread(target=start_midi, daemon=True)\n# once you start the midi_thread, it should register note_on, note_off, cc, etc from your device and send them to mmm\nmidi_thread.start()\n\n\nmidi_thread.stop()\n\nmmm_audio.stop_audio()\n</code></pre>"},{"location":"examples/torch_mlp/","title":"torch_mlp","text":"<p>this examples uses a Torch MLP model to control a 16 parameter synth to play the synth, just hang out in the top 4 lines of code and play with the mouse</p> <p>you can also train the synth by creating any number of input/output pairs and making a new training</p> <pre><code>from mmm_src.MMMAudio import MMMAudio\nfrom random import random\n\nmmm_audio = MMMAudio(128, graph_name=\"Torch_MLP\", package_name=\"examples\")\n\nmmm_audio.start_audio() # start the audio thread - or restart it where it left off\n\nmmm_audio.stop_audio()  # stop/pause the mojo thread\n\n\n# below is the code to make a new training --------------------------------\n\n\n# if you make a new training below, you can load it into the synth\nmmm_audio.send_text_msg(\"load_mlp_training\", \"examples/nn_trainings/model_traced.pt\")  \n\n\n# toggle inference off so you can set the synth values directly\nmmm_audio.send_msg(\"toggle_inference\", 1.0)\n\nout_size = 16\n\ndef make_setting():\n    setting = []\n    for i in range(out_size):\n        setting.append(random())\n        mmm_audio.send_msg(\"model_output\" + str(i), setting[i])\n\n    return setting\n\noutputs = make_setting()\n\nX_train_list = []\ny_train_list = []\n\nfor i in range(len(y_train_list)):\n    print(f\"Element {i}: {X_train_list[i]}\")\n    print(f\"Element {i}: {y_train_list[i]}\")\n\n# when you like a setting add an input and output pair\n# this is assuming you are training on 4 pairs of data points\nX_train_list.append([0,0])\ny_train_list.append(outputs)\n\nX_train_list.append([0,1])\ny_train_list.append(outputs)\n\nX_train_list.append([1,1])\ny_train_list.append(outputs)\n\nX_train_list.append([1,0])\ny_train_list.append(outputs)\n\nlearn_rate = 0.001\nepochs = 5000\n\nlayers = [ [ 64, \"relu\" ], [ 64, \"relu\" ], [ out_size, \"sigmoid\" ] ]\n\nfrom mmm_utils.mlp_trainer import train_nn\n\ntrain_nn(X_train_list, y_train_list, layers, learn_rate, epochs, \"examples/nn_trainings/model_traced.pt\")\n</code></pre>"}]}